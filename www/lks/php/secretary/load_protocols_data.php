<?php
/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –¥–ª—è —Å–µ–∫—Ä–µ—Ç–∞—Ä—è
 * –§–∞–π–ª: www/lks/php/secretary/load_protocols_data.php
 */

require_once __DIR__ . "/../db/Database.php";
require_once __DIR__ . "/age_group_calculator.php";
require_once __DIR__ . "/../common/JsonProtocolManager.php";

if (!defined('TEST_MODE') && session_status() === PHP_SESSION_NONE) {
    session_start();
}

// –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if (!defined('TEST_MODE')) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!isset($_SESSION['user_role']) || !in_array($_SESSION['user_role'], ['Secretary', 'SuperUser', 'Admin'])) {
        http_response_code(403);
        echo json_encode(['success' => false, 'message' => '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω']);
        exit();
    }
}

if (!defined('TEST_MODE')) header('Content-Type: application/json; charset=utf-8');

try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST –∑–∞–ø—Ä–æ—Å–∞
    if (defined('TEST_MODE')) {
        $data = $_POST;
    } else {
        $rawInput = file_get_contents('php://input');
        $data = json_decode($rawInput, true);
    }
    
    if (!$data) {
        throw new Exception('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!isset($data['meroId'])) {
        throw new Exception('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: meroId');
    }
    
    $meroId = (int)$data['meroId'];
    $selectedDisciplines = $data['disciplines'] ?? null;
    
    if ($meroId <= 0) {
        throw new Exception('–ù–µ–≤–µ—Ä–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
    }
    
    error_log("üîÑ [LOAD_PROTOCOLS_DATA] –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è $meroId");
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    $db = Database::getInstance();
    $stmt = $db->prepare("SELECT * FROM meros WHERE oid = ?");
    $stmt->execute([$meroId]);
    $event = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if (!$event) {
        throw new Exception('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ü–∞—Ä—Å–∏–º class_distance
    $classDistance = json_decode($event['class_distance'], true);
    if (!$classDistance) {
        throw new Exception('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä JSON –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    $protocolManager = JsonProtocolManager::getInstance();
    
    $protocolsData = [];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ª–æ–¥–æ–∫
    $boatPriority = [
        'K-1' => 1,
        'K-2' => 2, 
        'K-4' => 3,
        'C-1' => 4,
        'C-2' => 5,
        'C-4' => 6,
        'D-10' => 7,
        'HD-1' => 8,
        'OD-1' => 9,
        'OD-2' => 10,
        'OC-1' => 11
    ];
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –ª–æ–¥–æ–∫ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    $sortedBoatClasses = array_keys($classDistance);
    usort($sortedBoatClasses, function($a, $b) use ($boatPriority) {
        $priorityA = $boatPriority[$a] ?? 999;
        $priorityB = $boatPriority[$b] ?? 999;
        return $priorityA - $priorityB;
    });
    
    error_log("üîÑ [LOAD_PROTOCOLS_DATA] –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ª–æ–¥–æ–∫: " . implode(', ', $sortedBoatClasses));
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º –ª–æ–¥–æ–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    foreach ($sortedBoatClasses as $boatClass) {
        $config = $classDistance[$boatClass];
        $sexes = $config['sex'] ?? [];
        $distances = $config['dist'] ?? [];
        $ageGroups = $config['age_group'] ?? [];
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø–æ–ª–∞–º
        foreach ($sexes as $sexIndex => $sex) {
            $distance = $distances[$sexIndex] ?? '';
            $ageGroupStr = $ageGroups[$sexIndex] ?? '';
            
            if (!$distance || !$ageGroupStr) {
                continue;
            }
            
            // –†–∞–∑–±–∏–≤–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
            $distanceList = array_map('trim', explode(',', $distance));
            
            // –†–∞–∑–±–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
            $ageGroupList = array_map('trim', explode(',', $ageGroupStr));
            
            foreach ($distanceList as $dist) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                if ($selectedDisciplines && is_array($selectedDisciplines)) {
                    $disciplineFound = false;
                    
                    foreach ($selectedDisciplines as $selectedDiscipline) {
                        if (is_array($selectedDiscipline)) {
                            // –ï—Å–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–∞–∫ –æ–±—ä–µ–∫—Ç
                            if ($selectedDiscipline['class'] === $boatClass && 
                                $selectedDiscipline['sex'] === $sex && 
                                $selectedDiscipline['distance'] === $dist) {
                                $disciplineFound = true;
                                break;
                            }
                        } else {
                            // –ï—Å–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
                            $disciplineString = "{$boatClass}_{$sex}_{$dist}";
                            if ($selectedDiscipline === $disciplineString) {
                                $disciplineFound = true;
                                break;
                            }
                        }
                    }
                    
                    // –ï—Å–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë
                    if (!$disciplineFound) {
                        continue;
                    }
                }
                
                foreach ($ageGroupList as $ageGroup) {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                    if (preg_match('/^(.+?):\s*(\d+)-(\d+)$/', $ageGroup, $matches)) {
                        $groupName = trim($matches[1]);
                        $minAge = (int)$matches[2];
                        $maxAge = (int)$matches[3];
                        $fullGroupName = $ageGroup; // –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –≤–æ–∑—Ä–∞—Å—Ç–æ–≤
                        
                        $redisKey = "protocol:{$meroId}:{$boatClass}:{$sex}:{$dist}:{$groupName}";
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                        if ($protocolManager->protocolExists($redisKey)) {
                            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª
                            $existingData = $protocolManager->loadProtocol($redisKey);
                            if ($existingData) {
                                error_log("‚úÖ [LOAD_PROTOCOLS_DATA] –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª: $redisKey");
                                $protocolsData[] = [
                                    'meroId' => (int)$meroId,
                                    'discipline' => $boatClass,
                                    'sex' => $sex,
                                    'distance' => $dist,
                                    'ageGroups' => [$existingData],
                                    'created_at' => date('Y-m-d H:i:s')
                                ];
                                continue;
                            }
                        }
                        
                        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                        $participants = getParticipantsForGroup($db, $meroId, $boatClass, $sex, $dist, $minAge, $maxAge);
                        
                        // –ù–ï –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ –¥–æ—Ä–æ–∂–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –∂–µ—Ä–µ–±—å–µ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä—É—á–Ω–æ–π
                        // $participants = assignLanesToParticipants($participants, $boatClass);
                        
                        $ageGroupData = [
                            'name' => $fullGroupName, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –≤–æ–∑—Ä–∞—Å—Ç–æ–≤
                            'protocol_number' => count($protocolsData) + 1,
                            'participants' => $participants,
                            'redisKey' => $redisKey,
                            'protected' => false
                        ];
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
                        $protocolManager->saveProtocol($redisKey, $ageGroupData);
                        
                        $protocolsData[] = [
                            'meroId' => (int)$meroId,
                            'discipline' => $boatClass,
                            'sex' => $sex,
                            'distance' => $dist,
                            'ageGroups' => [$ageGroupData],
                            'created_at' => date('Y-m-d H:i:s')
                        ];
                    }
                }
            }
        }
    }
    
    error_log("‚úÖ [LOAD_PROTOCOLS_DATA] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤: " . count($protocolsData));
    
    echo json_encode([
        'success' => true,
        'protocols' => $protocolsData,
        'total_protocols' => count($protocolsData)
    ], JSON_UNESCAPED_UNICODE);
    
} catch (Exception $e) {
    error_log("‚ùå [LOAD_PROTOCOLS_DATA] –û—à–∏–±–∫–∞: " . $e->getMessage());
    
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'message' => $e->getMessage()
    ], JSON_UNESCAPED_UNICODE);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã
 */
function getParticipantsForGroup($db, $meroId, $boatClass, $sex, $distance, $minAge, $maxAge) {
    $currentYear = date('Y');
    $yearEnd = $currentYear . '-12-31';
    
    $sql = "
        SELECT 
            u.oid, u.userid, u.fio, u.sex, u.birthdata, u.sportzvanie, u.city,
            t.teamname, t.teamcity
        FROM users u
        LEFT JOIN listreg lr ON u.oid = lr.users_oid
        LEFT JOIN teams t ON lr.teams_oid = t.oid
        WHERE lr.meros_oid = ?
        AND u.sex = ?
        AND u.accessrights = 'Sportsman'
        AND lr.status IN ('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω')
    ";
    
    $stmt = $db->prepare($sql);
    $stmt->execute([$meroId, $sex]);
    $participants = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    error_log("üîç –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {$boatClass}_{$sex}_{$distance} (–≤–æ–∑—Ä–∞—Å—Ç {$minAge}-{$maxAge}): –Ω–∞–π–¥–µ–Ω–æ " . count($participants) . " —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
    
    $filteredParticipants = [];
    $addedCount = 0;
    
    foreach ($participants as $participant) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        $birthDate = new DateTime($participant['birthdata']);
        $yearEndDate = new DateTime($yearEnd);
        $age = $yearEndDate->diff($birthDate)->y;
        
        if ($age >= $minAge && $age <= $maxAge) {
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —ç—Ç—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
            $disciplineSql = "
                SELECT discipline 
                FROM listreg 
                WHERE users_oid = ? AND meros_oid = ?
            ";
            $disciplineStmt = $db->prepare($disciplineSql);
            $disciplineStmt->execute([$participant['oid'], $meroId]);
            $disciplineData = $disciplineStmt->fetch(PDO::FETCH_ASSOC);
            
            if ($disciplineData) {
                $discipline = json_decode($disciplineData['discipline'], true);
                
                if ($discipline && isset($discipline[$boatClass])) {
                    $addedCount++;
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–æ—Ä–æ–∂–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    $existingLane = null;
                    $existingWater = null;
                    if (isset($discipline[$boatClass]['lane'])) {
                        $existingLane = $discipline[$boatClass]['lane'];
                    }
                    if (isset($discipline[$boatClass]['water'])) {
                        $existingWater = $discipline[$boatClass]['water'];
                    }
                    
                    $filteredParticipants[] = [
                        'userId' => $participant['userid'],
                        'userid' => $participant['userid'], // –î–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        'fio' => $participant['fio'],
                        'sex' => $participant['sex'],
                        'birthdata' => $participant['birthdata'],
                        'sportzvanie' => $participant['sportzvanie'],
                        'teamName' => $participant['teamname'] ?? '',
                        'teamCity' => $participant['teamcity'] ?? '',
                        'lane' => $existingLane, // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä –¥–æ—Ä–æ–∂–∫–∏
                        'water' => $existingWater ?? $existingLane, // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä –≤–æ–¥—ã
                        'place' => null,
                        'finishTime' => null,
                        'addedManually' => false,
                        'addedAt' => date('Y-m-d H:i:s')
                    ];
                }
            }
        }
    }
    
    error_log("‚úÖ –ì—Ä—É–ø–ø–∞ {$boatClass}_{$sex}_{$distance} (–≤–æ–∑—Ä–∞—Å—Ç {$minAge}-{$maxAge}): –¥–æ–±–∞–≤–ª–µ–Ω–æ {$addedCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
    
    return $filteredParticipants;
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –¥–æ—Ä–æ–∂–µ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
 */
function assignLanesToParticipants($participants, $boatClass) {
    if (empty($participants)) {
        return $participants;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ä–æ–∂–µ–∫ –¥–ª—è —Ç–∏–ø–∞ –ª–æ–¥–∫–∏
    $maxLanes = getMaxLanesForBoat($boatClass);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–æ—Ä–æ–∂–µ–∫
    $hasExistingLanes = false;
    foreach ($participants as $participant) {
        if (isset($participant['lane']) && $participant['lane'] !== null && $participant['lane'] !== '') {
            $hasExistingLanes = true;
            error_log("üîÑ [ASSIGN_LANES] –ù–∞–π–¥–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –Ω–æ–º–µ—Ä–æ–º –¥–æ—Ä–æ–∂–∫–∏: {$participant['fio']} - lane={$participant['lane']}");
            break;
        }
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –¥–æ—Ä–æ–∂–µ–∫ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã, –Ω–µ –∏–∑–º–µ–Ω—è–µ–º –∏—Ö
    if ($hasExistingLanes) {
        error_log("üîÑ [ASSIGN_LANES] –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–æ—Ä–æ–∂–µ–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö");
        foreach ($participants as &$participant) {
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª–µ water —Ç–∞–∫–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
            if (isset($participant['lane']) && !isset($participant['water'])) {
                $participant['water'] = $participant['lane'];
            } elseif (isset($participant['water']) && !isset($participant['lane'])) {
                $participant['lane'] = $participant['water'];
            }
        }
        return $participants;
    }
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    shuffle($participants);
    
    // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ –¥–æ—Ä–æ–∂–µ–∫
    $laneNumber = 1;
    foreach ($participants as &$participant) {
        if ($laneNumber <= $maxLanes) {
            $participant['lane'] = $laneNumber;
            $participant['water'] = $laneNumber;
            $laneNumber++;
        } else {
            $participant['lane'] = null;
            $participant['water'] = null;
        }
    }
    
    error_log("üîÑ [ASSIGN_LANES] –ù–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ –¥–æ—Ä–æ–∂–µ–∫ –¥–ª—è {$boatClass}: " . count($participants) . " —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
    
    return $participants;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Ä–æ–∂–µ–∫ –¥–ª—è —Ç–∏–ø–∞ –ª–æ–¥–∫–∏
 */
function getMaxLanesForBoat($boatClass) {
    switch ($boatClass) {
        case 'K-1':
        case 'C-1':
        case 'HD-1':
        case 'OD-1':
            return 8; // 8 –¥–æ—Ä–æ–∂–µ–∫ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –ª–æ–¥–æ–∫
        case 'K-2':
        case 'C-2':
        case 'OD-2':
            return 6; // 6 –¥–æ—Ä–æ–∂–µ–∫ –¥–ª—è –ø–∞—Ä–Ω—ã—Ö –ª–æ–¥–æ–∫
        case 'K-4':
        case 'C-4':
        case 'OC-1':
            return 4; // 4 –¥–æ—Ä–æ–∂–∫–∏ –¥–ª—è —á–µ—Ç–≤–µ—Ä–æ–∫
        case 'D-10':
            return 3; // 3 –¥–æ—Ä–æ–∂–∫–∏ –¥–ª—è –¥—Ä–∞–∫–æ–Ω–æ–≤
        default:
            return 8; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 8 –¥–æ—Ä–æ–∂–µ–∫
    }
}
?> 