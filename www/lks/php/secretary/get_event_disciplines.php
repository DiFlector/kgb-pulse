<?php
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
 * –§–∞–π–ª: www/lks/php/secretary/get_event_disciplines.php
 */

require_once __DIR__ . "/../db/Database.php";

if (!defined('TEST_MODE') && session_status() === PHP_SESSION_NONE) {
    session_start();
}

// –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if (!defined('TEST_MODE')) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!isset($_SESSION['user_role']) || !in_array($_SESSION['user_role'], ['Secretary', 'SuperUser', 'Admin'])) {
        http_response_code(403);
        echo json_encode(['success' => false, 'message' => '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω']);
        exit();
    }
}

if (!defined('TEST_MODE')) header('Content-Type: application/json; charset=utf-8');

try {
    error_log("üìã [GET_EVENT_DISCIPLINES] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è");
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ GET –∑–∞–ø—Ä–æ—Å–∞
    $meroId = isset($_GET['meroId']) ? (int)$_GET['meroId'] : 0;
    
    if ($meroId <= 0) {
        throw new Exception('–ù–µ —É–∫–∞–∑–∞–Ω ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    $db = Database::getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    $stmt = $db->prepare("SELECT class_distance FROM meros WHERE champn = ?");
    $stmt->execute([$meroId]);
    $classDistance = json_decode($stmt->fetchColumn(), true);
    
    if (!$classDistance) {
        throw new Exception('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏');
    }
    
    $disciplines = [];
    
    // –ü–∞—Ä—Å–∏–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏–∑ class_distance
    foreach ($classDistance as $class => $data) {
        if (isset($data['sex']) && isset($data['dist']) && isset($data['age_group'])) {
            $sexes = is_array($data['sex']) ? $data['sex'] : [$data['sex']];
            $distances = is_array($data['dist']) ? $data['dist'] : [$data['dist']];
            $ageGroups = is_array($data['age_group']) ? $data['age_group'] : [$data['age_group']];
            
            foreach ($distances as $distanceStr) {
                $individualDistances = explode(',', $distanceStr);
                
                foreach ($individualDistances as $distance) {
                    $cleanDistance = trim($distance);
                    
                    if (empty($cleanDistance) || !is_numeric($cleanDistance)) {
                        continue;
                    }
                    
                    foreach ($sexes as $sexIndex => $sex) {
                        $cleanSex = trim($sex);
                        
                        // –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∞
                        $ageGroupString = isset($ageGroups[$sexIndex]) ? $ageGroups[$sexIndex] : '';
                        $ageGroupsList = parseAgeGroups($ageGroupString);
                        
                        $disciplines[] = [
                            'class' => $class,
                            'sex' => $cleanSex,
                            'distance' => $cleanDistance,
                            'ageGroups' => $ageGroupsList
                        ];
                    }
                }
            }
        }
    }
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    $uniqueDisciplines = [];
    $seen = [];
    
    foreach ($disciplines as $discipline) {
        $key = $discipline['class'] . '_' . $discipline['sex'] . '_' . $discipline['distance'];
        if (!isset($seen[$key])) {
            $seen[$key] = true;
            $uniqueDisciplines[] = $discipline;
        }
    }
    
    error_log("‚úÖ [GET_EVENT_DISCIPLINES] –ü–æ–ª—É—á–µ–Ω–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω: " . count($uniqueDisciplines));
    
    $result = [
        'success' => true,
        'disciplines' => $uniqueDisciplines,
        'count' => count($uniqueDisciplines)
    ];
    
    echo json_encode($result, JSON_UNESCAPED_UNICODE);
    
} catch (Exception $e) {
    error_log("‚ùå [GET_EVENT_DISCIPLINES] –û—à–∏–±–∫–∞: " . $e->getMessage());
    
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'message' => $e->getMessage()
    ], JSON_UNESCAPED_UNICODE);
}

/**
 * –†–∞–∑–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø
 */
function parseAgeGroups($ageGroupString) {
    if (empty($ageGroupString)) {
        return [];
    }
    
    $groups = [];
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ ", "
    $groupStrings = explode(', ', $ageGroupString);
    
    foreach ($groupStrings as $groupString) {
        // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ ": "
        $parts = explode(': ', $groupString);
        if (count($parts) === 2) {
            $groupName = trim($parts[0]);
            $range = trim($parts[1]);
            
            // –†–∞–∑–±–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ "-"
            $rangeParts = explode('-', $range);
            if (count($rangeParts) === 2) {
                $minAge = (int)trim($rangeParts[0]);
                $maxAge = (int)trim($rangeParts[1]);
                
                $groups[] = [
                    'name' => $groupName,
                    'min_age' => $minAge,
                    'max_age' => $maxAge,
                    'full_name' => $groupString
                ];
            }
        }
    }
    
    return $groups;
}
?> 