<?php
/**
 * –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ –∂–µ—Ä–µ–±—å–µ–≤–∫–æ–π
 * –§–∞–π–ª: www/lks/php/secretary/view_protocol.php
 */

require_once __DIR__ . "/../db/Database.php";
require_once __DIR__ . "/../helpers.php";
require_once __DIR__ . "/age_group_calculator.php";

if (!defined('TEST_MODE') && session_status() === PHP_SESSION_NONE) {
    session_start();
}

// –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if (!defined('TEST_MODE')) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!isset($_SESSION['user_role']) || !in_array($_SESSION['user_role'], ['Secretary', 'SuperUser', 'Admin'])) {
        http_response_code(403);
        echo json_encode(['success' => false, 'message' => '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω']);
        exit();
    }
}

if (!defined('TEST_MODE')) header('Content-Type: application/json; charset=utf-8');

try {
    error_log("üîç [VIEW_PROTOCOL] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞");
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST –∑–∞–ø—Ä–æ—Å–∞
    $input = json_decode(file_get_contents('php://input'), true);
    
    if (!$input || !isset($input['redisKey'])) {
        throw new Exception('–ù–µ —É–∫–∞–∑–∞–Ω –∫–ª—é—á –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Redis');
    }
    
    $redisKey = $input['redisKey'];
    
    error_log("üîç [VIEW_PROTOCOL] –ö–ª—é—á Redis: $redisKey");
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
    $redis = new Redis();
    $redis->connect('redis', 6379);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ –∫–ª—é—á—É Redis
    $protocolData = $redis->get($redisKey);
    
    if (!$protocolData) {
        error_log("üîç [VIEW_PROTOCOL] –ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis: $redisKey");
        throw new Exception('–ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∑–∞–Ω–æ–≤–æ.');
    }
    
    $protocol = json_decode($protocolData, true);
    
    if (!$protocol) {
        throw new Exception('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–∞');
    }
    
    error_log("üîç [VIEW_PROTOCOL] –ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞–≥—Ä—É–∂–µ–Ω: " . count($protocol['participants'] ?? []) . " —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–æ—Ä–æ–∂–∫–∞–º
    if (isset($protocol['participants']) && is_array($protocol['participants'])) {
        usort($protocol['participants'], function($a, $b) {
            return ($a['lane'] ?? 0) <=> ($b['lane'] ?? 0);
        });
    }
    
    echo json_encode([
        'success' => true,
        'protocol' => $protocol
    ]);
    
} catch (Exception $e) {
    error_log("üîç [VIEW_PROTOCOL] –û—à–∏–±–∫–∞: " . $e->getMessage());
    
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'message' => $e->getMessage()
    ]);
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
 */
function createProtocol($meroId, $discipline, $sex, $distance, $type) {
    $db = Database::getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    $stmt = $db->prepare("
        SELECT l.*, u.fio, u.birthdata, u.city, u.sportzvanie, u.sex
        FROM listreg l 
        JOIN users u ON l.users_oid = u.oid 
        WHERE l.meros_oid = ? 
        AND l.status IN ('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω', '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
        AND u.sex = ?
    ");
    $stmt->execute([$meroId, $sex]);
    $registrations = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    $participants = [];
    
    foreach ($registrations as $reg) {
        $classDistance = json_decode($reg['class_distance'], true);
        if (isset($classDistance[$discipline])) {
            $regDistances = is_array($classDistance[$discipline]['dist']) ? 
                $classDistance[$discipline]['dist'] : 
                explode(', ', $classDistance[$discipline]['dist']);
            
            if (in_array($distance, array_map('trim', $regDistances))) {
                $birthYear = date('Y', strtotime($reg['birthdata']));
                $age = date('Y') - $birthYear;
                
                $participants[] = [
                    'id' => $reg['userid'],
                    'fio' => $reg['fio'],
                    'birthYear' => $birthYear,
                    'age' => $age,
                    'ageGroup' => calculateAgeGroup($age, $sex, $discipline, $meroId),
                    'city' => $reg['city'],
                    'sportzvanie' => $reg['sportzvanie'] ?? '–ë–†',
                    'teamName' => $reg['teamname'] ?? $reg['city'],
                    'lane' => null,
                    'startNumber' => null,
                    'result' => null,
                    'place' => null,
                    'notes' => ''
                ];
            }
        }
    }
    
    return [
        'meroId' => $meroId,
        'discipline' => $discipline,
        'sex' => $sex,
        'distance' => $distance,
        'type' => $type,
        'participants' => $participants,
        'heats' => [],
        'totalParticipants' => count($participants),
        'created_at' => date('Y-m-d H:i:s'),
        'updated_at' => date('Y-m-d H:i:s')
    ];
}

/**
 * –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∂–µ—Ä–µ–±—å–µ–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
function conductDraw($protocolData) {
    $participants = $protocolData['participants'];
    
    if (empty($participants)) {
        return $protocolData;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
    $ageGroups = [];
    foreach ($participants as $participant) {
        $ageGroup = $participant['ageGroup'];
        if (!isset($ageGroups[$ageGroup])) {
            $ageGroups[$ageGroup] = [];
        }
        $ageGroups[$ageGroup][] = $participant;
    }
    
    $heats = [];
    $startNumber = 1;
    
    foreach ($ageGroups as $ageGroup => $groupParticipants) {
        $participantCount = count($groupParticipants);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–µ–∑–¥–æ–≤
        $lanesPerHeat = 9; // –ú–∞–∫—Å–∏–º—É–º 9 –¥–æ—Ä–æ–∂–µ–∫
        
        if ($participantCount <= $lanesPerHeat) {
            // –û–¥–∏–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–µ–∑–¥
            $heat = createHeat($groupParticipants, $ageGroup, '–§–∏–Ω–∞–ª', 1, $startNumber);
            $heats[] = $heat;
            $startNumber += count($groupParticipants);
            
        } elseif ($participantCount <= $lanesPerHeat * 2) {
            // –ü–æ–ª—É—Ñ–∏–Ω–∞–ª + —Ñ–∏–Ω–∞–ª
            $shuffled = $groupParticipants;
            shuffle($shuffled);
            
            $heat1Participants = array_slice($shuffled, 0, ceil($participantCount / 2));
            $heat2Participants = array_slice($shuffled, ceil($participantCount / 2));
            
            $heat1 = createHeat($heat1Participants, $ageGroup, '–ü–æ–ª—É—Ñ–∏–Ω–∞–ª', 1, $startNumber);
            $heats[] = $heat1;
            $startNumber += count($heat1Participants);
            
            $heat2 = createHeat($heat2Participants, $ageGroup, '–ü–æ–ª—É—Ñ–∏–Ω–∞–ª', 2, $startNumber);
            $heats[] = $heat2;
            $startNumber += count($heat2Participants);
            
        } else {
            // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ + –ø–æ–ª—É—Ñ–∏–Ω–∞–ª + —Ñ–∏–Ω–∞–ª
            $shuffled = $groupParticipants;
            shuffle($shuffled);
            
            $heatCount = ceil($participantCount / $lanesPerHeat);
            
            for ($i = 0; $i < $heatCount; $i++) {
                $heatParticipants = array_slice($shuffled, $i * $lanesPerHeat, $lanesPerHeat);
                if (!empty($heatParticipants)) {
                    $heat = createHeat($heatParticipants, $ageGroup, '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π', $i + 1, $startNumber);
                    $heats[] = $heat;
                    $startNumber += count($heatParticipants);
                }
            }
        }
    }
    
    $protocolData['heats'] = $heats;
    $protocolData['updated_at'] = date('Y-m-d H:i:s');
    
    return $protocolData;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–µ–∑–¥–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
 */
function createHeat($participants, $ageGroup, $heatType, $heatNumber, $startNumber) {
    shuffle($participants); // –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–æ—Ä–æ–∂–∫–∞–º
    
    $lanes = [];
    $currentStartNumber = $startNumber;
    
    for ($lane = 1; $lane <= 9; $lane++) {
        if (isset($participants[$lane - 1])) {
            $participant = $participants[$lane - 1];
            $participant['lane'] = $lane;
            $participant['startNumber'] = $currentStartNumber++;
            $lanes[$lane] = $participant;
        } else {
            $lanes[$lane] = null;
        }
    }
    
    return [
        'ageGroup' => $ageGroup,
        'heatType' => $heatType,
        'heatNumber' => $heatNumber,
        'lanes' => $lanes,
        'participantCount' => count(array_filter($lanes))
    ];
}

/**
 * –†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AgeGroupCalculator)
 */
function calculateAgeGroup($age, $sex, $discipline, $meroId = null) {
    global $db;
    
    // –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω meroId, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –≥—Ä—É–ø–ø—É
    if (!$meroId) {
        $genderPrefix = $sex === '–ú' ? '–ú—É–∂—á–∏–Ω—ã' : '–ñ–µ–Ω—â–∏–Ω—ã';
        return "$genderPrefix (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞)";
    }
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        $stmt = $db->prepare("SELECT class_distance FROM meros WHERE champn = ?");
        $stmt->execute([$meroId]);
        $mero = $stmt->fetch(PDO::FETCH_ASSOC);
        
        if (!$mero || !$mero['class_distance']) {
            $genderPrefix = $sex === '–ú' ? '–ú—É–∂—á–∏–Ω—ã' : '–ñ–µ–Ω—â–∏–Ω—ã';
            return "$genderPrefix (–≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)";
        }
        
        $classDistance = json_decode($mero['class_distance'], true);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å AgeGroupCalculator
        return AgeGroupCalculator::calculateAgeGroup($age, $sex, $discipline, $classDistance);
        
    } catch (Exception $e) {
        $genderPrefix = $sex === '–ú' ? '–ú—É–∂—á–∏–Ω—ã' : '–ñ–µ–Ω—â–∏–Ω—ã';
        return "$genderPrefix (–æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞)";
    }
}
?> 