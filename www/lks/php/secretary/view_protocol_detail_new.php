<?php
/**
 * –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ - –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ Redis
 * –§–∞–π–ª: www/lks/php/secretary/view_protocol_detail_new.php
 */

require_once __DIR__ . "/protocol_manager.php";

if (!defined('TEST_MODE') && session_status() === PHP_SESSION_NONE) {
    session_start();
}

// –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if (!defined('TEST_MODE')) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!isset($_SESSION['user_role']) || !in_array($_SESSION['user_role'], ['Secretary', 'SuperUser', 'Admin'])) {
        http_response_code(403);
        echo json_encode(['success' => false, 'message' => '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω']);
        exit();
    }
}

if (!defined('TEST_MODE')) header('Content-Type: application/json; charset=utf-8');

try {
    error_log("üîç [VIEW_PROTOCOL_DETAIL_NEW] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ—Ç–æ–∫–æ–ª–∞");
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST –∑–∞–ø—Ä–æ—Å–∞
    if (defined('TEST_MODE')) {
        $data = $_POST;
    } else {
        $rawInput = file_get_contents('php://input');
        $data = json_decode($rawInput, true);
    }
    
    if (!$data) {
        throw new Exception('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!isset($data['meroId']) || !isset($data['class']) || !isset($data['sex']) || !isset($data['distance']) || !isset($data['type'])) {
        throw new Exception('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: meroId, class, sex, distance, type');
    }
    
    $meroId = (int)$data['meroId'];
    $class = $data['class'];
    $sex = $data['sex'];
    $distance = $data['distance'];
    $type = $data['type'];
    $ageGroup = $data['ageGroup'] ?? null;
    
    error_log("üîç [VIEW_PROTOCOL_DETAIL_NEW] –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: $class $sex $distance $type" . ($ageGroup ? " ($ageGroup)" : ""));
    
    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    $protocolManager = new ProtocolManager();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
    $protocol = $protocolManager->loadProtocol($meroId, $class, $sex, $distance, $type, $ageGroup);
    
    if (!$protocol) {
        throw new Exception('–ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∑–∞–Ω–æ–≤–æ.');
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    $formattedProtocol = formatProtocolForDisplay($protocol, $type);
    
    $result = [
        'success' => true,
        'protocol' => $formattedProtocol,
        'originalProtocol' => $protocol // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    ];
    
    error_log("üîç [VIEW_PROTOCOL_DETAIL_NEW] –ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞–≥—Ä—É–∂–µ–Ω: " . count($formattedProtocol['participants'] ?? []) . " —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
    
    echo json_encode($result, JSON_UNESCAPED_UNICODE);
    
} catch (Exception $e) {
    error_log("‚ùå [VIEW_PROTOCOL_DETAIL_NEW] –û—à–∏–±–∫–∞: " . $e->getMessage());
    
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'message' => $e->getMessage()
    ], JSON_UNESCAPED_UNICODE);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function formatProtocolForDisplay($protocol, $type) {
    $participants = [];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–µ–∑–¥—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (isset($protocol['heats']) && is_array($protocol['heats'])) {
        foreach ($protocol['heats'] as $heat) {
            if (isset($heat['lanes']) && is_array($heat['lanes'])) {
                foreach ($heat['lanes'] as $lane => $participant) {
                    if ($participant) {
                        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–µ–∑–¥–µ
                        $participant['heatType'] = $heat['heatType'] ?? '';
                        $participant['heatNumber'] = $heat['heatNumber'] ?? 1;
                        
                        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        if (isset($participant['birthdata'])) {
                            $age = AgeGroupCalculator::calculateAgeOnDecember31($participant['birthdata']);
                            $participant['ageGroup'] = calculateDisplayAgeGroup($age, $protocol['sex']);
                        }
                        
                        $participants[] = $participant;
                    }
                }
            }
        }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –¥–æ—Ä–æ–∂–∫–∞–º
    usort($participants, function($a, $b) {
        return ($a['lane'] ?? 0) <=> ($b['lane'] ?? 0);
    });
    
    return [
        'meroId' => $protocol['meroId'],
        'class' => $protocol['class'],
        'sex' => $protocol['sex'],
        'distance' => $protocol['distance'],
        'ageGroup' => $protocol['ageGroup'],
        'type' => $protocol['type'],
        'participants' => $participants,
        'totalParticipants' => count($participants),
        'maxLanes' => $protocol['maxLanes'] ?? 9,
        'created_at' => $protocol['created_at']
    ];
}

/**
 * –†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function calculateDisplayAgeGroup($age, $sex) {
    $genderPrefix = $sex === '–ú' ? '–ú—É–∂—á–∏–Ω—ã' : '–ñ–µ–Ω—â–∏–Ω—ã';
    
    if ($age <= 12) {
        return "$genderPrefix (–º–ª–∞–¥—à–∏–µ)";
    } elseif ($age <= 15) {
        return "$genderPrefix (—Å—Ä–µ–¥–Ω–∏–µ)";
    } elseif ($age <= 18) {
        return "$genderPrefix (—Å—Ç–∞—Ä—à–∏–µ)";
    } elseif ($age <= 23) {
        return "$genderPrefix (—é–Ω–∏–æ—Ä—ã)";
    } elseif ($age <= 39) {
        return "$genderPrefix (–≤–∑—Ä–æ—Å–ª—ã–µ)";
    } else {
        return "$genderPrefix (–≤–µ—Ç–µ—Ä–∞–Ω—ã)";
    }
}
?> 