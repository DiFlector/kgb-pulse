<?php
session_start();
require_once __DIR__ . '/../common/Auth.php';
require_once __DIR__ . '/../db/Database.php';

// ะะบะปััะฐะตะผ ะฒัะฒะพะด ะพัะธะฑะพะบ ะดะปั ะพัะปะฐะดะบะธ
error_reporting(E_ALL);
ini_set('display_errors', 1);

// ะะพะดะบะปััะฐะตะผัั ะบ Redis
try {
    $redis = new Redis();
    $redis->connect('redis', 6379, 5);
} catch (Exception $e) {
    error_log("โ [REMOVE_PARTICIPANT] ะัะธะฑะบะฐ ะฟะพะดะบะปััะตะฝะธั ะบ Redis: " . $e->getMessage());
    http_response_code(500);
    echo json_encode(['success' => false, 'message' => 'ะัะธะฑะบะฐ ะฟะพะดะบะปััะตะฝะธั ะบ Redis']);
    exit;
}

// ะัะพะฒะตัะบะฐ ะฐะฒัะพัะธะทะฐัะธะธ ะธ ะฟัะฐะฒ ะดะพัััะฟะฐ
$auth = new Auth();

if (!$auth->isAuthenticated()) {
    http_response_code(401);
    echo json_encode(['success' => false, 'message' => 'ะะต ะฐะฒัะพัะธะทะพะฒะฐะฝ']);
    exit;
}

if (!$auth->hasAnyRole(['Secretary', 'SuperUser', 'Admin'])) {
    http_response_code(403);
    echo json_encode(['success' => false, 'message' => 'ะะตั ะฟัะฐะฒ ะดะพัััะฟะฐ']);
    exit;
}

// ะะพะปััะตะฝะธะต ะดะฐะฝะฝัั ะธะท ะทะฐะฟัะพัะฐ
$input = json_decode(file_get_contents('php://input'), true);
error_log("๐ [REMOVE_PARTICIPANT] ะกัััะต ะดะฐะฝะฝัะต ะทะฐะฟัะพัะฐ: " . file_get_contents('php://input'));
error_log("๐ [REMOVE_PARTICIPANT] ะะตะบะพะดะธัะพะฒะฐะฝะฝัะต ะดะฐะฝะฝัะต: " . json_encode($input));

$meroId = $input['meroId'] ?? null;
$groupKey = $input['groupKey'] ?? null;
$participantUserId = $input['participantUserId'] ?? null;

// ะัะปะฐะดะพัะฝะฐั ะธะฝัะพัะผะฐัะธั
error_log("๐ [REMOVE_PARTICIPANT] ะะทะฒะปะตัะตะฝะฝัะต ะฟะฐัะฐะผะตััั: meroId=$meroId, groupKey=$groupKey, participantUserId=$participantUserId");

if (!$meroId || !$groupKey || !$participantUserId) {
    error_log("โ [REMOVE_PARTICIPANT] ะะต ะฒัะต ะฟะฐัะฐะผะตััั ัะบะฐะทะฐะฝั: meroId=$meroId, groupKey=$groupKey, participantUserId=$participantUserId");
    echo json_encode(['success' => false, 'message' => 'ะะต ะฒัะต ะฟะฐัะฐะผะตััั ัะบะฐะทะฐะฝั']);
    exit;
}

// ะัะพะฒะตััะตะผ, ััะพ participantUserId ัะฒะปัะตััั ัะธัะปะพะผ
if (!is_numeric($participantUserId)) {
    error_log("โ [REMOVE_PARTICIPANT] participantUserId ะฝะต ัะฒะปัะตััั ัะธัะปะพะผ: $participantUserId");
    echo json_encode(['success' => false, 'message' => 'ะะตะบะพััะตะบัะฝัะน ID ััะฐััะฝะธะบะฐ']);
    exit;
}

try {
    $db = Database::getInstance();
    
    // ะะพะปััะฐะตะผ oid ะฟะพะปัะทะพะฒะฐัะตะปั ะฟะพ userid
    $stmt = $db->prepare("SELECT oid FROM users WHERE userid = ?");
    $stmt->execute([$participantUserId]);
    $userOid = $stmt->fetchColumn();
    
    if (!$userOid) {
        error_log("โ [REMOVE_PARTICIPANT] ะะพะปัะทะพะฒะฐัะตะปั ะฝะต ะฝะฐะนะดะตะฝ: userid=$participantUserId");
        echo json_encode(['success' => false, 'message' => 'ะะพะปัะทะพะฒะฐัะตะปั ะฝะต ะฝะฐะนะดะตะฝ']);
        exit;
    }
    
    error_log("๐ [REMOVE_PARTICIPANT] ะฃะดะฐะปัะตะผ ััะฐััะฝะธะบะฐ ะธะท ะฟัะพัะพะบะพะปะฐ: groupKey=$groupKey, userid=$participantUserId");
    
    // ะะพะปััะฐะตะผ ะดะฐะฝะฝัะต ะฟัะพัะพะบะพะปะฐ ะธะท Redis
    $protocolData = $redis->get($groupKey);
    
    if (!$protocolData) {
        error_log("โ [REMOVE_PARTICIPANT] ะัะพัะพะบะพะป ะฝะต ะฝะฐะนะดะตะฝ ะฒ Redis: groupKey=$groupKey");
        echo json_encode(['success' => false, 'message' => 'ะัะพัะพะบะพะป ะฝะต ะฝะฐะนะดะตะฝ']);
        exit;
    }
    
    $protocol = json_decode($protocolData, true);
    
    if (!isset($protocol['participants'])) {
        error_log("โ [REMOVE_PARTICIPANT] ะกัััะบัััะฐ ะฟัะพัะพะบะพะปะฐ ะฝะตะบะพััะตะบัะฝะฐ: ะฝะตั ะฟะพะปั participants");
        echo json_encode(['success' => false, 'message' => 'ะกัััะบัััะฐ ะฟัะพัะพะบะพะปะฐ ะฝะตะบะพััะตะบัะฝะฐ']);
        exit;
    }
    
    // ะัะตะผ ะธ ัะดะฐะปัะตะผ ััะฐััะฝะธะบะฐ ะธะท ะฟัะพัะพะบะพะปะฐ
    $participantFound = false;
    foreach ($protocol['participants'] as $index => $participant) {
        if ($participant['userid'] == $participantUserId) {
            error_log("๐ [REMOVE_PARTICIPANT] ะะฐะนะดะตะฝ ััะฐััะฝะธะบ ะดะปั ัะดะฐะปะตะฝะธั: {$participant['fio']}");
            unset($protocol['participants'][$index]);
            $participantFound = true;
            break;
        }
    }
    
    if (!$participantFound) {
        error_log("โ [REMOVE_PARTICIPANT] ะฃัะฐััะฝะธะบ ะฝะต ะฝะฐะนะดะตะฝ ะฒ ะฟัะพัะพะบะพะปะต: userid=$participantUserId");
        echo json_encode(['success' => false, 'message' => 'ะฃัะฐััะฝะธะบ ะฝะต ะฝะฐะนะดะตะฝ ะฒ ะฟัะพัะพะบะพะปะต']);
        exit;
    }
    
    // ะะตัะตะธะฝะดะตะบัะธััะตะผ ะผะฐััะธะฒ ััะฐััะฝะธะบะพะฒ
    $protocol['participants'] = array_values($protocol['participants']);
    
    // ะะฑะฝะพะฒะปัะตะผ ะฒัะตะผั ะธะทะผะตะฝะตะฝะธั
    $protocol['updated_at'] = date('Y-m-d H:i:s');
    
    // ะกะพััะฐะฝัะตะผ ะพะฑะฝะพะฒะปะตะฝะฝัะน ะฟัะพัะพะบะพะป ะฒ Redis
    $redis->setex($groupKey, 86400, json_encode($protocol)); // TTL 24 ัะฐัะฐ
    
    error_log("โ [REMOVE_PARTICIPANT] ะฃัะฐััะฝะธะบ ััะฟะตัะฝะพ ัะดะฐะปะตะฝ ะธะท ะฟัะพัะพะบะพะปะฐ. ะััะฐะปะพัั ััะฐััะฝะธะบะพะฒ: " . count($protocol['participants']));
    
    echo json_encode([
        'success' => true,
        'message' => 'ะฃัะฐััะฝะธะบ ัะดะฐะปะตะฝ ะธะท ะฟัะพัะพะบะพะปะฐ',
        'groupKey' => $groupKey,
        'userid' => $participantUserId,
        'remainingParticipants' => count($protocol['participants'])
    ]);
    
} catch (Exception $e) {
    error_log("โ [REMOVE_PARTICIPANT] ะัะธะฑะบะฐ ัะดะฐะปะตะฝะธั ััะฐััะฝะธะบะฐ: " . $e->getMessage());
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'message' => 'ะัะธะฑะบะฐ ัะดะฐะปะตะฝะธั ััะฐััะฝะธะบะฐ: ' . $e->getMessage()
    ]);
}
?>