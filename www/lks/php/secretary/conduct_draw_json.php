<?php
/**
 * –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∂–µ—Ä–µ–±—å–µ–≤–∫–∏ –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
 * –§–∞–π–ª: www/lks/php/secretary/conduct_draw_json.php
 */

require_once __DIR__ . "/../db/Database.php";
require_once __DIR__ . "/../common/JsonProtocolManager.php";

if (!defined('TEST_MODE') && session_status() === PHP_SESSION_NONE) {
    session_start();
}

// –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if (!defined('TEST_MODE')) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!isset($_SESSION['user_role']) || !in_array($_SESSION['user_role'], ['Secretary', 'SuperUser', 'Admin'])) {
        http_response_code(403);
        echo json_encode(['success' => false, 'message' => '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω']);
        exit();
    }
}

if (!defined('TEST_MODE')) header('Content-Type: application/json; charset=utf-8');

try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST –∑–∞–ø—Ä–æ—Å–∞
    if (defined('TEST_MODE')) {
        $data = $_POST;
    } else {
        $rawInput = file_get_contents('php://input');
        $data = json_decode($rawInput, true);
    }
    
    if (!$data) {
        throw new Exception('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!isset($data['groupKey'])) {
        throw new Exception('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: groupKey');
    }
    
    $groupKey = $data['groupKey'];
    $preserveProtected = $data['preserveProtected'] ?? true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    $meroId = $data['meroId'] ?? null;
    $discipline = $data['discipline'] ?? 'K-1';
    $sex = $data['sex'] ?? '–ú';
    $distance = $data['distance'] ?? '200';
    $ageGroup = $data['ageGroup'] ?? '–≥—Ä—É–ø–ø–∞ 1';
    
    if (empty($groupKey)) {
        throw new Exception('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞');
    }
    
    error_log("üîÑ [CONDUCT_DRAW] –ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã: $groupKey (—Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ: " . ($preserveProtected ? '–¥–∞' : '–Ω–µ—Ç') . ")");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä JSON –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    $protocolManager = JsonProtocolManager::getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞
    $protocolData = $protocolManager->loadProtocol($groupKey);
    
    // –ï—Å–ª–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    if (!$protocolData) {
        error_log("‚ö†Ô∏è [CONDUCT_DRAW] –ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π: $groupKey");
        
        if (!$meroId || !$discipline || !$sex || !$distance || !$ageGroup) {
            throw new Exception('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: meroId, discipline, sex, distance, ageGroup');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è class_distance
        $db = Database::getInstance();
        $meroSql = "SELECT class_distance FROM meros WHERE oid = ?";
        $meroStmt = $db->prepare($meroSql);
        $meroStmt->execute([$meroId]);
        $meroData = $meroStmt->fetch(PDO::FETCH_ASSOC);
        
        if (!$meroData || !$meroData['class_distance']) {
            throw new Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
        }
        
        $classDistance = json_decode($meroData['class_distance'], true);
        
        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        $participants = getParticipantsForGroupWithClassDistance($db, $meroId, $discipline, $sex, $distance, $ageGroup, $classDistance);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
        $protocolData = [
            'name' => $ageGroup, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –≤–æ–∑—Ä–∞—Å—Ç–æ–≤
            'protocol_number' => 1,
            'participants' => $participants,
            'redisKey' => $groupKey,
            'protected' => false
        ];
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
        $protocolManager->saveProtocol($groupKey, $protocolData);
        error_log("‚úÖ [CONDUCT_DRAW] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: $groupKey");
    }
    
    // –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–∞–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ë–î –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ (–∏—Å–∫–ª—é—á–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ JSON –∏ —Å–º–µ—à–µ–Ω–∏–µ –ø–æ–ª–æ–≤)
    {
        $db = Database::getInstance();
        $meroSql = "SELECT class_distance FROM meros WHERE oid = ?";
        $meroStmt = $db->prepare($meroSql);
        $meroStmt->execute([$meroId]);
        $meroData = $meroStmt->fetch(PDO::FETCH_ASSOC);
        if ($meroData && $meroData['class_distance']) {
            $classDistance = json_decode($meroData['class_distance'], true);
            $participantsFresh = getParticipantsForGroupWithClassDistance($db, $meroId, $discipline, $sex, $distance, $ageGroup, $classDistance);
            $protocolData['participants'] = $participantsFresh;
            $protocolManager->updateProtocol($groupKey, $protocolData);
        }
    }
    
    if (!isset($protocolData['participants']) || !is_array($protocolData['participants'])) {
        error_log("‚ùå [CONDUCT_DRAW] –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: groupKey=$groupKey");
        echo json_encode(['success' => false, 'message' => '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞']);
        exit();
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ä–æ–∂–µ–∫ –¥–ª—è —Ç–∏–ø–∞ –ª–æ–¥–∫–∏
    $maxLanes = getMaxLanesForBoat($discipline);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ—Ä–æ–≥–∏, –º–µ—Å—Ç–∞, –≤—Ä–µ–º—è)
    $protectedData = [];
    if ($preserveProtected) {
        foreach ($protocolData['participants'] as $participant) {
            if (isset($participant['protected']) && $participant['protected']) {
                $protectedData[$participant['userId']] = [
                    'lane' => $participant['lane'] ?? null,
                    'water' => $participant['water'] ?? null,
                    'place' => $participant['place'] ?? null,
                    'finishTime' => $participant['finishTime'] ?? null
                ];
            }
        }
    }
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    $participants = $protocolData['participants'];
    shuffle($participants);
    
    // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–æ—Ä–æ–∂–µ–∫
    $laneNumber = 1;
    $assignedCount = 0;
    
    foreach ($participants as &$participant) {
        if ($laneNumber <= $maxLanes) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            if ($preserveProtected && isset($protectedData[$participant['userId']])) {
                $protected = $protectedData[$participant['userId']];
                $participant['lane'] = $protected['lane'];
                $participant['water'] = $protected['water'];
                $participant['place'] = $protected['place'];
                $participant['finishTime'] = $protected['finishTime'];
                $participant['protected'] = true;
                error_log("üîÑ [CONDUCT_DRAW] –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {$participant['fio']}");
            } else {
                $participant['lane'] = $laneNumber;
                $participant['water'] = $laneNumber;
                $participant['protected'] = false;
                $assignedCount++;
            }
            $laneNumber++;
        } else {
            $participant['lane'] = null;
            $participant['water'] = null;
            $participant['protected'] = false;
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    $protocolData['participants'] = $participants;
    $protocolData['draw_conducted_at'] = date('Y-m-d H:i:s');
    $protocolData['draw_preserved_protected'] = $preserveProtected;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –≤ JSON —Ñ–∞–π–ª
    $protocolManager->updateProtocol($groupKey, $protocolData);
    
    error_log("‚úÖ [CONDUCT_DRAW] –ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –Ω–∞–∑–Ω–∞—á–µ–Ω–æ $assignedCount –Ω–æ–≤—ã—Ö –¥–æ—Ä–æ–∂–µ–∫, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ " . count($protectedData) . " –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π");
    
    echo json_encode([
        'success' => true,
        'message' => "–ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –ù–∞–∑–Ω–∞—á–µ–Ω–æ $assignedCount –Ω–æ–≤—ã—Ö –¥–æ—Ä–æ–∂–µ–∫.",
        'assigned_lanes' => $assignedCount,
        'preserved_protected' => count($protectedData),
        'max_lanes' => $maxLanes
    ], JSON_UNESCAPED_UNICODE);
    
} catch (Exception $e) {
    error_log("‚ùå [CONDUCT_DRAW] –û—à–∏–±–∫–∞: " . $e->getMessage());
    
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'message' => $e->getMessage()
    ], JSON_UNESCAPED_UNICODE);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã
 */
function getParticipantsForGroup($db, $meroId, $boatClass, $sex, $distance, $minAge, $maxAge) {
    $currentYear = date('Y');
    $yearEnd = $currentYear . '-12-31';
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∫ M/W/MIX
    $sexCat = $sex;
    if ($sexCat === '–ú') { $sexCat = 'M'; }
    if ($sexCat === '–ñ') { $sexCat = 'W'; }

    $sql = "
        SELECT 
            u.oid, u.userid, u.fio, u.sex, u.birthdata, u.sportzvanie, u.city,
            lr.oid AS reg_oid,
            lr.teams_oid,
            lr.discipline::text AS discipline_json,
            t.teamname, t.teamcity
        FROM users u
        LEFT JOIN listreg lr ON u.oid = lr.users_oid
        LEFT JOIN teams t ON lr.teams_oid = t.oid
        WHERE lr.meros_oid = ?
          AND u.accessrights = 'Sportsman'
          AND lr.status IN ('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω')
          AND lr.role = 'rower'
    ";
    $params = [$meroId];
    if ($sexCat === 'M') { $sql .= " AND u.sex = '–ú'"; }
    elseif ($sexCat === 'W') { $sql .= " AND u.sex = '–ñ'"; }
    
    $stmt = $db->prepare($sql);
    $stmt->execute($params);
    $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏ –≤—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É –∫–æ–º–∞–Ω–¥—ã –ø–æ –°–ê–ú–û–ú–£ –ú–õ–ê–î–®–ï–ú–£ –≥—Ä–µ–±—Ü—É
    $teams = [];
    foreach ($rows as $r) {
        $teamId = (int)$r['teams_oid'];
        if (!$teamId) { continue; }
        if (!isset($teams[$teamId])) {
            $disc = json_decode($r['discipline_json'] ?? '{}', true);
            $teams[$teamId] = [
                'team' => [
                    'teamname' => $r['teamname'] ?? '',
                    'teamcity' => $r['teamcity'] ?? '',
                ],
                'discipline' => $disc,
                'rowers' => [],
                'youngestAge' => 1000,
            ];
        }
        $birthDate = new DateTime($r['birthdata']);
        $yearEndDate = new DateTime($yearEnd);
        $age = $yearEndDate->diff($birthDate)->y;
        $teams[$teamId]['rowers'][] = $r + ['age' => $age];
        if ($age < $teams[$teamId]['youngestAge']) { $teams[$teamId]['youngestAge'] = $age; }
    }

    $filteredParticipants = [];
    $addedCount = 0;
    foreach ($teams as $teamId => $tinfo) {
        $disc = $tinfo['discipline'];
        if (!$disc || !isset($disc[$boatClass])) { continue; }
        $boat = $disc[$boatClass];
        $teamSex = $boat['sex'][0] ?? null; // 'M'|'W'|'MIX'
        if ($sexCat !== $teamSex) { continue; }
        $distCsv = $boat['dist'][0] ?? '';
        $okDist = false;
        foreach (explode(',', (string)$distCsv) as $d) { if ((int)trim($d) === (int)$distance) { $okDist = true; break; } }
        if (!$okDist) { continue; }

        $young = (int)$tinfo['youngestAge'];
        if (!($young >= $minAge && $young <= $maxAge)) { continue; }

        foreach ($tinfo['rowers'] as $r) {
            $filteredParticipants[] = [
                'userId' => $r['userid'],
                'userid' => $r['userid'],
                'fio' => $r['fio'],
                'sex' => $r['sex'],
                'birthdata' => $r['birthdata'],
                'sportzvanie' => $r['sportzvanie'],
                'teamName' => $r['teamname'] ?? '',
                'teamCity' => $r['teamcity'] ?? '',
                'teams_oid' => $teamId,
                'reg_oid' => $r['reg_oid'] ?? null,
                'lane' => null,
                'water' => null,
                'place' => null,
                'finishTime' => null,
                'protected' => false,
                'addedManually' => false,
                'addedAt' => date('Y-m-d H:i:s')
            ];
            $addedCount++;
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä—É–ª–µ–≤–æ–≥–æ –∏ –±–∞—Ä–∞–±–∞–Ω—â–∏–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º (–±–µ–∑ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã)
    $teamsSeen = [];
    foreach ($filteredParticipants as $p) {
        if (!empty($p['teams_oid'])) { $teamsSeen[(int)$p['teams_oid']] = true; }
    }
    if (!empty($teamsSeen)) {
        $teamIds = implode(',', array_keys($teamsSeen));
        $extraSql = "
            SELECT lr.teams_oid, lr.oid AS reg_oid, lr.role,
                   u.userid, u.fio, u.sex, u.birthdata, u.sportzvanie,
                   t.teamname, t.teamcity
            FROM listreg lr
            JOIN users u ON u.oid = lr.users_oid
            JOIN teams t ON t.oid = lr.teams_oid
            WHERE lr.meros_oid = ?
              AND lr.teams_oid IN ($teamIds)
              AND lr.role IN ('steerer','drummer')
        ";
        $st = $db->prepare($extraSql);
        $st->execute([$meroId]);
        $extra = $st->fetchAll(PDO::FETCH_ASSOC);
        foreach ($extra as $e) {
            $filteredParticipants[] = [
                'userId' => $e['userid'],
                'userid' => $e['userid'],
                'fio' => $e['fio'],
                'sex' => $e['sex'],
                'birthdata' => $e['birthdata'],
                'sportzvanie' => $e['sportzvanie'],
                'teamName' => $e['teamname'] ?? '',
                'teamCity' => $e['teamcity'] ?? '',
                'teams_oid' => $e['teams_oid'] ?? null,
                'reg_oid' => $e['reg_oid'] ?? null,
                'role' => $e['role'],
                'lane' => null,
                'water' => null,
                'place' => null,
                'finishTime' => null,
                'protected' => false,
                'addedManually' => false,
                'addedAt' => date('Y-m-d H:i:s')
            ];
        }
    }
    
    error_log("‚úÖ [CONDUCT_DRAW] –ì—Ä—É–ø–ø–∞ {$boatClass}_{$sex}_{$distance} (–≤–æ–∑—Ä–∞—Å—Ç {$minAge}-{$maxAge}): –¥–æ–±–∞–≤–ª–µ–Ω–æ {$addedCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
    
    return $filteredParticipants;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Ä–æ–∂–µ–∫ –¥–ª—è —Ç–∏–ø–∞ –ª–æ–¥–∫–∏
 */
function getMaxLanesForBoat($boatClass) {
    $cls = strtoupper(trim((string)$boatClass));
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ: –ª—é–±–æ–π –∫–ª–∞—Å—Å, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å 'D' (–¥—Ä–∞–∫–æ–Ω—ã) ‚Äî 6 –¥–æ—Ä–æ–∂–µ–∫, –∏–Ω–∞—á–µ ‚Äî 10
    if (strpos($cls, 'D') === 0) {
        return 6;
    }
    return 10;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º class_distance
 */
function getParticipantsForGroupWithClassDistance($db, $meroId, $boatClass, $sex, $distance, $targetAgeGroup, $classDistance) {
    $currentYear = date('Y');
    $yearEnd = $currentYear . '-12-31';
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∫ M/W/MIX
    $sexCat = $sex;
    if ($sexCat === '–ú') { $sexCat = 'M'; }
    if ($sexCat === '–ñ') { $sexCat = 'W'; }
    
    $sql = "
        SELECT 
            u.oid, u.userid, u.fio, u.sex, u.birthdata, u.sportzvanie, u.city,
            lr.oid AS reg_oid,
            lr.teams_oid,
            lr.discipline::text AS discipline_json,
            t.teamname, t.teamcity
        FROM users u
        LEFT JOIN listreg lr ON u.oid = lr.users_oid
        LEFT JOIN teams t ON lr.teams_oid = t.oid
        WHERE lr.meros_oid = ?
          AND u.accessrights = 'Sportsman'
          AND lr.status IN ('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω')
          AND lr.role = 'rower'
    ";
    $params = [$meroId];
    if ($sexCat === 'M') { $sql .= " AND u.sex = '–ú'"; }
    elseif ($sexCat === 'W') { $sql .= " AND u.sex = '–ñ'"; }
    
    $stmt = $db->prepare($sql);
    $stmt->execute($params);
    $participants = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    error_log("üîç [CONDUCT_DRAW] –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {$boatClass}_{$sex}_{$distance} (—Ü–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: {$targetAgeGroup}): –Ω–∞–π–¥–µ–Ω–æ " . count($participants) . " —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
    
    $filteredParticipants = [];
    $addedCount = 0;
    
    foreach ($participants as $participant) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        $birthDate = new DateTime($participant['birthdata']);
        $yearEndDate = new DateTime($yearEnd);
        $age = $yearEndDate->diff($birthDate)->y;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –∏–∑ class_distance (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª)
        $calculatedAgeGroup = calculateAgeGroupFromClassDistance($age, $sexCat, $classDistance, $boatClass);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É
        if ($calculatedAgeGroup !== $targetAgeGroup) { continue; }

        $disc = json_decode($participant['discipline_json'] ?? '{}', true);
        if (!$disc || !isset($disc[$boatClass])) { continue; }
        $boat = $disc[$boatClass];
        $teamSex = $boat['sex'][0] ?? null;
        if ($sexCat !== $teamSex) { continue; }
        $distCsv = $boat['dist'][0] ?? '';
        $okDist = false;
        foreach (explode(',', (string)$distCsv) as $d) {
            if ((int)trim($d) === (int)$distance) { $okDist = true; break; }
        }
        if (!$okDist) { continue; }

        $addedCount++;
        $filteredParticipants[] = [
            'userId' => $participant['userid'],
            'userid' => $participant['userid'],
            'fio' => $participant['fio'],
            'sex' => $participant['sex'],
            'birthdata' => $participant['birthdata'],
            'sportzvanie' => $participant['sportzvanie'],
            'teamName' => $participant['teamname'] ?? '',
            'teamCity' => $participant['teamcity'] ?? '',
            'teams_oid' => $participant['teams_oid'] ?? null,
            'reg_oid' => $participant['reg_oid'] ?? null,
            'lane' => null,
            'water' => null,
            'place' => null,
            'finishTime' => null,
            'protected' => false,
            'addedManually' => false,
            'addedAt' => date('Y-m-d H:i:s')
        ];
        
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä—É–ª–µ–≤–æ–≥–æ –∏ –±–∞—Ä–∞–±–∞–Ω—â–∏–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º (–±–µ–∑ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã)
    $teamsSeen = [];
    foreach ($filteredParticipants as $p) {
        if (!empty($p['teams_oid'])) { $teamsSeen[(int)$p['teams_oid']] = true; }
    }
    if (!empty($teamsSeen)) {
        $teamIds = implode(',', array_keys($teamsSeen));
        $extraSql = "
            SELECT lr.teams_oid, lr.oid AS reg_oid, lr.role,
                   u.userid, u.fio, u.sex, u.birthdata, u.sportzvanie,
                   t.teamname, t.teamcity
            FROM listreg lr
            JOIN users u ON u.oid = lr.users_oid
            JOIN teams t ON t.oid = lr.teams_oid
            WHERE lr.meros_oid = ?
              AND lr.teams_oid IN ($teamIds)
              AND lr.role IN ('steerer','drummer')
        ";
        $st = $db->prepare($extraSql);
        $st->execute([$meroId]);
        $extra = $st->fetchAll(PDO::FETCH_ASSOC);
        foreach ($extra as $e) {
            $filteredParticipants[] = [
                'userId' => $e['userid'],
                'userid' => $e['userid'],
                'fio' => $e['fio'],
                'sex' => $e['sex'],
                'birthdata' => $e['birthdata'],
                'sportzvanie' => $e['sportzvanie'],
                'teamName' => $e['teamname'] ?? '',
                'teamCity' => $e['teamcity'] ?? '',
                'teams_oid' => $e['teams_oid'] ?? null,
                'reg_oid' => $e['reg_oid'] ?? null,
                'role' => $e['role'],
                'lane' => null,
                'water' => null,
                'place' => null,
                'finishTime' => null,
                'protected' => false,
                'addedManually' => false,
                'addedAt' => date('Y-m-d H:i:s')
            ];
        }
    }
    
    error_log("‚úÖ [CONDUCT_DRAW] –ì—Ä—É–ø–ø–∞ {$boatClass}_{$sex}_{$distance} (—Ü–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: {$targetAgeGroup}): –¥–æ–±–∞–≤–ª–µ–Ω–æ {$addedCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
    
    return $filteredParticipants;
}

/**
 * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –∏–∑ class_distance
 */
function calculateAgeGroupFromClassDistance($age, $sex, $classDistance, $class) {
    if (!isset($classDistance[$class])) {
        return null;
    }
    
    $classData = $classDistance[$class];
    $sexes = $classData['sex'] ?? [];
    $ageGroups = $classData['age_group'] ?? [];
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ–ª–∞
    $sexIndex = array_search($sex, $sexes);
    if ($sexIndex === false) {
        return null;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∞
    $ageGroupString = $ageGroups[$sexIndex] ?? '';
    if (empty($ageGroupString)) {
        return null;
    }
    
    // –†–∞–∑–±–∏—Ä–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    $availableAgeGroups = array_map('trim', explode(',', $ageGroupString));
    
    foreach ($availableAgeGroups as $ageGroupString) {
        // –†–∞–∑–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É: "–≥—Ä—É–ø–ø–∞ 1: 18-29" -> ["–≥—Ä—É–ø–ø–∞ 1", "18-29"]
        $parts = explode(': ', $ageGroupString);
        if (count($parts) !== 2) {
            continue;
        }
        
        $groupName = trim($parts[0]);
        $ageRange = trim($parts[1]);
        
        // –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω: "18-29" -> [18, 29]
        $ageLimits = explode('-', $ageRange);
        if (count($ageLimits) !== 2) {
            continue;
        }
        
        $minAge = (int)$ageLimits[0];
        $maxAge = (int)$ageLimits[1];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
        if ($age >= $minAge && $age <= $maxAge) {
            return $ageGroupString; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        }
    }
    
    // –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    return null;
} 