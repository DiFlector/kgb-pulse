<?php
/**
 * –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∂–µ—Ä–µ–±—å–µ–≤–∫–∏ –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
 * –§–∞–π–ª: www/lks/php/secretary/conduct_draw_json.php
 */

require_once __DIR__ . "/../db/Database.php";
require_once __DIR__ . "/../common/JsonProtocolManager.php";

if (!defined('TEST_MODE') && session_status() === PHP_SESSION_NONE) {
    session_start();
}

// –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if (!defined('TEST_MODE')) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!isset($_SESSION['user_role']) || !in_array($_SESSION['user_role'], ['Secretary', 'SuperUser', 'Admin'])) {
        http_response_code(403);
        echo json_encode(['success' => false, 'message' => '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω']);
        exit();
    }
}

if (!defined('TEST_MODE')) header('Content-Type: application/json; charset=utf-8');

try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST –∑–∞–ø—Ä–æ—Å–∞
    if (defined('TEST_MODE')) {
        $data = $_POST;
    } else {
        $rawInput = file_get_contents('php://input');
        $data = json_decode($rawInput, true);
    }
    
    if (!$data) {
        throw new Exception('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!isset($data['groupKey'])) {
        throw new Exception('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: groupKey');
    }
    
    $groupKey = $data['groupKey'];
    $preserveProtected = $data['preserveProtected'] ?? true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    $meroId = $data['meroId'] ?? null;
    $discipline = $data['discipline'] ?? 'K-1';
    $sex = $data['sex'] ?? '–ú';
    $distance = $data['distance'] ?? '200';
    $ageGroup = $data['ageGroup'] ?? '–≥—Ä—É–ø–ø–∞ 1';
    
    if (empty($groupKey)) {
        throw new Exception('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞');
    }
    
    error_log("üîÑ [CONDUCT_DRAW] –ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã: $groupKey (—Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ: " . ($preserveProtected ? '–¥–∞' : '–Ω–µ—Ç') . ")");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä JSON –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    $protocolManager = JsonProtocolManager::getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞
    $protocolData = $protocolManager->loadProtocol($groupKey);
    
    // –ï—Å–ª–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    if (!$protocolData) {
        error_log("‚ö†Ô∏è [CONDUCT_DRAW] –ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π: $groupKey");
        
        if (!$meroId || !$discipline || !$sex || !$distance || !$ageGroup) {
            throw new Exception('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: meroId, discipline, sex, distance, ageGroup');
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
        if (preg_match('/–≥—Ä—É–ø–ø–∞\s+(\d+):\s*(\d+)-(\d+)/', $ageGroup, $matches)) {
            $groupName = $matches[1];
            $minAge = (int)$matches[2];
            $maxAge = (int)$matches[3];
        } elseif (preg_match('/–≥—Ä—É–ø–ø–∞\s+([^:]+):\s*(\d+)-(\d+)/', $ageGroup, $matches)) {
            // –î–ª—è –≥—Ä—É–ø–ø —Ç–∏–ø–∞ "–≥—Ä—É–ø–ø–∞ –Æ1: 0-12"
            $groupName = $matches[1];
            $minAge = (int)$matches[2];
            $maxAge = (int)$matches[3];
        } else {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            $groupName = '–≥—Ä—É–ø–ø–∞ 1';
            $minAge = 18;
            $maxAge = 29;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        $db = Database::getInstance();
        $participants = getParticipantsForGroup($db, $meroId, $discipline, $sex, $distance, $minAge, $maxAge);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
        $protocolData = [
            'name' => $ageGroup,
            'protocol_number' => 1,
            'participants' => $participants,
            'redisKey' => $groupKey,
            'protected' => false
        ];
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
        $protocolManager->saveProtocol($groupKey, $protocolData);
        error_log("‚úÖ [CONDUCT_DRAW] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: $groupKey");
    }
    
    if (!isset($protocolData['participants']) || !is_array($protocolData['participants'])) {
        error_log("‚ùå [CONDUCT_DRAW] –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: groupKey=$groupKey");
        echo json_encode(['success' => false, 'message' => '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞']);
        exit();
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ä–æ–∂–µ–∫ –¥–ª—è —Ç–∏–ø–∞ –ª–æ–¥–∫–∏
    $maxLanes = getMaxLanesForBoat($discipline);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ—Ä–æ–≥–∏, –º–µ—Å—Ç–∞, –≤—Ä–µ–º—è)
    $protectedData = [];
    if ($preserveProtected) {
        foreach ($protocolData['participants'] as $participant) {
            if (isset($participant['protected']) && $participant['protected']) {
                $protectedData[$participant['userId']] = [
                    'lane' => $participant['lane'] ?? null,
                    'water' => $participant['water'] ?? null,
                    'place' => $participant['place'] ?? null,
                    'finishTime' => $participant['finishTime'] ?? null
                ];
            }
        }
    }
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    $participants = $protocolData['participants'];
    shuffle($participants);
    
    // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–æ—Ä–æ–∂–µ–∫
    $laneNumber = 1;
    $assignedCount = 0;
    
    foreach ($participants as &$participant) {
        if ($laneNumber <= $maxLanes) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            if ($preserveProtected && isset($protectedData[$participant['userId']])) {
                $protected = $protectedData[$participant['userId']];
                $participant['lane'] = $protected['lane'];
                $participant['water'] = $protected['water'];
                $participant['place'] = $protected['place'];
                $participant['finishTime'] = $protected['finishTime'];
                $participant['protected'] = true;
                error_log("üîÑ [CONDUCT_DRAW] –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {$participant['fio']}");
            } else {
                $participant['lane'] = $laneNumber;
                $participant['water'] = $laneNumber;
                $participant['protected'] = false;
                $assignedCount++;
            }
            $laneNumber++;
        } else {
            $participant['lane'] = null;
            $participant['water'] = null;
            $participant['protected'] = false;
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    $protocolData['participants'] = $participants;
    $protocolData['draw_conducted_at'] = date('Y-m-d H:i:s');
    $protocolData['draw_preserved_protected'] = $preserveProtected;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –≤ JSON —Ñ–∞–π–ª
    $protocolManager->updateProtocol($groupKey, $protocolData);
    
    error_log("‚úÖ [CONDUCT_DRAW] –ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –Ω–∞–∑–Ω–∞—á–µ–Ω–æ $assignedCount –Ω–æ–≤—ã—Ö –¥–æ—Ä–æ–∂–µ–∫, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ " . count($protectedData) . " –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π");
    
    echo json_encode([
        'success' => true,
        'message' => "–ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –ù–∞–∑–Ω–∞—á–µ–Ω–æ $assignedCount –Ω–æ–≤—ã—Ö –¥–æ—Ä–æ–∂–µ–∫.",
        'assigned_lanes' => $assignedCount,
        'preserved_protected' => count($protectedData),
        'max_lanes' => $maxLanes
    ], JSON_UNESCAPED_UNICODE);
    
} catch (Exception $e) {
    error_log("‚ùå [CONDUCT_DRAW] –û—à–∏–±–∫–∞: " . $e->getMessage());
    
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'message' => $e->getMessage()
    ], JSON_UNESCAPED_UNICODE);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã
 */
function getParticipantsForGroup($db, $meroId, $boatClass, $sex, $distance, $minAge, $maxAge) {
    $currentYear = date('Y');
    $yearEnd = $currentYear . '-12-31';
    
    $sql = "
        SELECT 
            u.oid, u.userid, u.fio, u.sex, u.birthdata, u.sportzvanie, u.city,
            t.teamname, t.teamcity
        FROM users u
        LEFT JOIN listreg lr ON u.oid = lr.users_oid
        LEFT JOIN teams t ON lr.teams_oid = t.oid
        WHERE lr.meros_oid = ?
        AND u.sex = ?
        AND u.accessrights = 'Sportsman'
        AND lr.status IN ('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω')
    ";
    
    $stmt = $db->prepare($sql);
    $stmt->execute([$meroId, $sex]);
    $participants = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    error_log("üîç [CONDUCT_DRAW] –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {$boatClass}_{$sex}_{$distance} (–≤–æ–∑—Ä–∞—Å—Ç {$minAge}-{$maxAge}): –Ω–∞–π–¥–µ–Ω–æ " . count($participants) . " —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
    
    $filteredParticipants = [];
    $addedCount = 0;
    
    foreach ($participants as $participant) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        $birthDate = new DateTime($participant['birthdata']);
        $yearEndDate = new DateTime($yearEnd);
        $age = $yearEndDate->diff($birthDate)->y;
        
        if ($age >= $minAge && $age <= $maxAge) {
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —ç—Ç—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
            $disciplineSql = "
                SELECT discipline 
                FROM listreg 
                WHERE users_oid = ? AND meros_oid = ?
            ";
            $disciplineStmt = $db->prepare($disciplineSql);
            $disciplineStmt->execute([$participant['oid'], $meroId]);
            $disciplineData = $disciplineStmt->fetch(PDO::FETCH_ASSOC);
            
            if ($disciplineData) {
                $discipline = json_decode($disciplineData['discipline'], true);
                
                if ($discipline && isset($discipline[$boatClass])) {
                    $addedCount++;
                    
                    $filteredParticipants[] = [
                        'userId' => $participant['userid'],
                        'userid' => $participant['userid'], // –î–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        'fio' => $participant['fio'],
                        'sex' => $participant['sex'],
                        'birthdata' => $participant['birthdata'],
                        'sportzvanie' => $participant['sportzvanie'],
                        'teamName' => $participant['teamname'] ?? '',
                        'teamCity' => $participant['teamcity'] ?? '',
                        'lane' => null,
                        'water' => null,
                        'place' => null,
                        'finishTime' => null,
                        'protected' => false,
                        'addedManually' => false,
                        'addedAt' => date('Y-m-d H:i:s')
                    ];
                }
            }
        }
    }
    
    error_log("‚úÖ [CONDUCT_DRAW] –ì—Ä—É–ø–ø–∞ {$boatClass}_{$sex}_{$distance} (–≤–æ–∑—Ä–∞—Å—Ç {$minAge}-{$maxAge}): –¥–æ–±–∞–≤–ª–µ–Ω–æ {$addedCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
    
    return $filteredParticipants;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Ä–æ–∂–µ–∫ –¥–ª—è —Ç–∏–ø–∞ –ª–æ–¥–∫–∏
 */
function getMaxLanesForBoat($boatClass) {
    switch ($boatClass) {
        case 'K-1':
        case 'C-1':
        case 'HD-1':
        case 'OD-1':
            return 8; // 8 –¥–æ—Ä–æ–∂–µ–∫ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –ª–æ–¥–æ–∫
        case 'K-2':
        case 'C-2':
        case 'OD-2':
            return 6; // 6 –¥–æ—Ä–æ–∂–µ–∫ –¥–ª—è –ø–∞—Ä–Ω—ã—Ö –ª–æ–¥–æ–∫
        case 'K-4':
        case 'C-4':
        case 'OC-1':
            return 4; // 4 –¥–æ—Ä–æ–∂–∫–∏ –¥–ª—è —á–µ—Ç–≤–µ—Ä–æ–∫
        case 'D-10':
            return 3; // 3 –¥–æ—Ä–æ–∂–∫–∏ –¥–ª—è –¥—Ä–∞–∫–æ–Ω–æ–≤
        default:
            return 8; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 8 –¥–æ—Ä–æ–∂–µ–∫
    }
} 