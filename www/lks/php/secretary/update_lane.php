<?php
/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–æ—Ä–æ–∂–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
 * –§–∞–π–ª: www/lks/php/secretary/update_lane.php
 */

require_once __DIR__ . "/../db/Database.php";
require_once __DIR__ . "/../common/JsonProtocolManager.php";

if (!defined('TEST_MODE') && session_status() === PHP_SESSION_NONE) {
    session_start();
}

// –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if (!defined('TEST_MODE')) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!isset($_SESSION['user_role']) || !in_array($_SESSION['user_role'], ['Secretary', 'SuperUser', 'Admin'])) {
        http_response_code(403);
        echo json_encode(['success' => false, 'message' => '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω']);
        exit();
    }
}

if (!defined('TEST_MODE')) header('Content-Type: application/json; charset=utf-8');

try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST –∑–∞–ø—Ä–æ—Å–∞
    if (defined('TEST_MODE')) {
        $data = $_POST;
    } else {
        $rawInput = file_get_contents('php://input');
        $data = json_decode($rawInput, true);
    }
    
    if (!$data) {
        throw new Exception('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!isset($data['groupKey'])) {
        throw new Exception('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: groupKey');
    }
    
    if (!isset($data['userId'])) {
        throw new Exception('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: userId');
    }
    
    if (!isset($data['lane'])) {
        throw new Exception('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: lane');
    }
    
    $groupKey = $data['groupKey'];
    $userId = (int)$data['userId'];
    $lane = (int)$data['lane'];
    
    if (empty($groupKey) || $userId <= 0 || $lane <= 0) {
        throw new Exception('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞');
    }
    
    error_log("üîÑ [UPDATE_LANE] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Ä–æ–∂–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ $userId –Ω–∞ –¥–æ—Ä–æ–∂–∫—É $lane –≤ –≥—Ä—É–ø–ø–µ $groupKey");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä JSON –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    $protocolManager = JsonProtocolManager::getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞
    $protocolData = $protocolManager->loadProtocol($groupKey);
    
    if (!$protocolData) {
        error_log("‚ùå [UPDATE_LANE] –ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: groupKey=$groupKey");
        echo json_encode(['success' => false, 'message' => '–ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω']);
        exit();
    }
    
    if (!isset($protocolData['participants']) || !is_array($protocolData['participants'])) {
        error_log("‚ùå [UPDATE_LANE] –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: groupKey=$groupKey");
        echo json_encode(['success' => false, 'message' => '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞']);
        exit();
    }
    
    // –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    $participantIndex = -1;
    $participantName = '';
    
    foreach ($protocolData['participants'] as $index => $participant) {
        if (isset($participant['userId']) && $participant['userId'] == $userId) {
            $participantIndex = $index;
            $participantName = $participant['fio'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫';
            break;
        }
    }
    
    if ($participantIndex === -1) {
        error_log("‚ùå [UPDATE_LANE] –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ: userId=$userId, groupKey=$groupKey");
        echo json_encode(['success' => false, 'message' => '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ']);
        exit();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–∞ –ª–∏ –¥–æ—Ä–æ–∂–∫–∞ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    foreach ($protocolData['participants'] as $index => $participant) {
        if ($index !== $participantIndex && isset($participant['lane']) && $participant['lane'] == $lane) {
            error_log("‚ùå [UPDATE_LANE] –î–æ—Ä–æ–∂–∫–∞ $lane —É–∂–µ –∑–∞–Ω—è—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º: {$participant['fio']}");
            echo json_encode(['success' => false, 'message' => "–î–æ—Ä–æ–∂–∫–∞ $lane —É–∂–µ –∑–∞–Ω—è—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º {$participant['fio']}"]);
            exit();
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –¥–æ—Ä–æ–∂–∫–∏
    $oldLane = $protocolData['participants'][$participantIndex]['lane'] ?? null;
    $protocolData['participants'][$participantIndex]['lane'] = $lane;
    $protocolData['participants'][$participantIndex]['water'] = $lane; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –ø–æ–ª–µ water
    
    error_log("‚úÖ [UPDATE_LANE] –î–æ—Ä–æ–∂–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: $participantName (userId=$userId) —Å –¥–æ—Ä–æ–∂–∫–∏ $oldLane –Ω–∞ –¥–æ—Ä–æ–∂–∫—É $lane");
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –≤ JSON —Ñ–∞–π–ª
    $protocolManager->updateProtocol($groupKey, $protocolData);
    
    echo json_encode([
        'success' => true,
        'message' => "–î–æ—Ä–æ–∂–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ $participantName –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ $lane",
        'userId' => $userId,
        'lane' => $lane
    ], JSON_UNESCAPED_UNICODE);
    
} catch (Exception $e) {
    error_log("‚ùå [UPDATE_LANE] –û—à–∏–±–∫–∞: " . $e->getMessage());
    
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'message' => $e->getMessage()
    ], JSON_UNESCAPED_UNICODE);
} 