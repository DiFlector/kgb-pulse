<?php
require_once __DIR__ . "/../db/Database.php";
require_once __DIR__ . "/../helpers.php";
require_once __DIR__ . "/age_group_calculator.php";
require_once dirname(__DIR__, 3) . '/vendor/autoload.php';

if (!defined('TEST_MODE') && session_status() === PHP_SESSION_NONE) {
    session_start();
}

// –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if (!defined('TEST_MODE')) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!isset($_SESSION['user_role']) || !in_array($_SESSION['user_role'], ['Secretary', 'SuperUser', 'Admin'])) {
        http_response_code(403);
        echo json_encode(['success' => false, 'message' => '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω']);
        exit;
    }
}

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST-–∑–∞–ø—Ä–æ—Å–∞
if (defined('TEST_MODE')) {
    $data = $_POST;
} else {
    $rawInput = file_get_contents('php://input');
    error_log("üîÑ [GENERATE_PROTOCOLS] –°—ã—Ä—ã–µ –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ: " . $rawInput);
    
    $data = json_decode($rawInput, true);
    
    // –ï—Å–ª–∏ JSON –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª—Å—è, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ $_POST
    if ($data === null && !empty($_POST)) {
        $data = $_POST;
        error_log("üîÑ [GENERATE_PROTOCOLS] –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ $_POST: " . json_encode($data));
    }
}

// –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
error_log("üîÑ [GENERATE_PROTOCOLS] –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ: " . json_encode($data));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
if (!isset($data['meroId'])) {
    http_response_code(400);
    echo json_encode(['success' => false, 'message' => '–ù–µ —É–∫–∞–∑–∞–Ω ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è']);
    exit;
}

try {
    $db = Database::getInstance();
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
    $redis = new Redis();
    try {
        $connected = $redis->connect('redis', 6379, 5); // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        if (!$connected) {
            throw new Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis');
        }
    } catch (Exception $e) {
        error_log("–û–®–ò–ë–ö–ê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: " . $e->getMessage());
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ Redis, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        $redis = null;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    $stmt = $db->prepare("SELECT * FROM meros WHERE champn = ?");
    $stmt->execute([$data['meroId']]);
    $mero = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if (!$mero) {
        throw new Exception('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
    $classDistance = json_decode($mero['class_distance'], true);
    if (!$classDistance) {
        throw new Exception('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏');
    }
    
    error_log("üîÑ [GENERATE_PROTOCOLS] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {$data['meroId']}");
    
    $allProtocols = [];
    $debugInfo = [];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏–∑ class_distance
    foreach ($classDistance as $class => $disciplineData) {
        if (!isset($disciplineData['sex']) || !isset($disciplineData['dist']) || !isset($disciplineData['age_group'])) {
            continue;
        }
        
        $sexes = is_array($disciplineData['sex']) ? $disciplineData['sex'] : [$disciplineData['sex']];
        $distances = is_array($disciplineData['dist']) ? $disciplineData['dist'] : [$disciplineData['dist']];
        $ageGroups = is_array($disciplineData['age_group']) ? $disciplineData['age_group'] : [$disciplineData['age_group']];
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
        foreach ($distances as $distanceStr) {
            // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∏—Å—Ç–∞–Ω—Ü–∏–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            $individualDistances = explode(',', $distanceStr);
            
            foreach ($individualDistances as $distance) {
                $distance = trim($distance);
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–æ–ª
                foreach ($sexes as $sexIndex => $sex) {
                    if (!isset($ageGroups[$sexIndex])) {
                        continue;
                    }
                    
                    $ageGroupString = $ageGroups[$sexIndex];
                    $parsedAgeGroups = AgeGroupCalculator::parseAgeGroups($ageGroupString);
                    
                    if (empty($parsedAgeGroups)) {
                        continue;
                    }
                    
                    error_log("üîÑ [GENERATE_PROTOCOLS] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É: $class $sex {$distance}–º");
                    
                    // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
                    $participants = getParticipantsForDiscipline($db, $data['meroId'], $class, $sex, $distance);
                    
                    error_log("üîÑ [GENERATE_PROTOCOLS] –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: " . count($participants));
                    
                    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –∫–∞–∂–¥–æ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
                    foreach ($parsedAgeGroups as $ageGroupIndex => $ageGroup) {
                        $ageGroupName = $ageGroup['full_name'];
                        
                        // –§–∏–ª—å—Ç—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ
                        $ageGroupParticipants = [];
                        foreach ($participants as $participant) {
                            $age = AgeGroupCalculator::calculateAgeOnDecember31($participant['birthdata']);
                            if ($age !== null && $age >= $ageGroup['min_age'] && $age <= $ageGroup['max_age']) {
                                $ageGroupParticipants[] = $participant;
                            }
                        }
                        
                        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø—É—Å—Ç–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª)
                        $protocol = createProtocolForAgeGroup(
                            $redis,
                            $data['meroId'], 
                            $class, 
                            $sex, 
                            $distance, 
                            $ageGroupName,
                            $ageGroupParticipants, 
                            'start',
                            $ageGroupIndex + 1
                        );
                        
                        if ($protocol) {
                            $allProtocols[] = $protocol;
                            $participantCount = count($ageGroupParticipants);
                            $debugInfo[] = "‚úÖ $class $sex {$distance}–º - $ageGroupName: $participantCount —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤";
                        }
                    }
                }
            }
        }
    }
    
    error_log("üîÑ [GENERATE_PROTOCOLS] –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤: " . count($allProtocols));
    
    echo json_encode([
        'success' => true,
        'message' => '–ü—Ä–æ—Ç–æ–∫–æ–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã',
        'protocols' => $allProtocols,
        'debug' => [
            'totalProtocols' => count($allProtocols),
            'disciplineDetails' => $debugInfo
        ]
    ]);
    
} catch (Exception $e) {
    error_log("–û–®–ò–ë–ö–ê –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤: " . $e->getMessage());
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'message' => $e->getMessage()
    ]);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
 */
function getParticipantsForDiscipline($db, $meroId, $class, $sex, $distance) {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º oid –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    $stmt = $db->prepare("SELECT oid FROM meros WHERE champn = ?");
    $stmt->execute([$meroId]);
    $meroOid = $stmt->fetchColumn();
    
    if (!$meroOid) {
        error_log("‚ö†Ô∏è [GENERATE_PROTOCOLS] –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å champn = $meroId –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        return [];
    }
    
    $stmt = $db->prepare("
        SELECT l.*, u.fio, u.birthdata, u.city, u.sportzvanie, u.sex, u.userid, u.country,
               t.teamname, t.teamcity
        FROM listreg l 
        JOIN users u ON l.users_oid = u.oid 
        LEFT JOIN teams t ON l.teams_oid = t.oid
        WHERE l.meros_oid = ? 
        AND l.status = '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
        AND u.sex = ?
        AND l.discipline::text LIKE ?
    ");
    
    $classDistanceLike = '%"' . $class . '"%';
    $stmt->execute([$meroOid, $sex, $classDistanceLike]);
    
    $allParticipants = $stmt->fetchAll(PDO::FETCH_ASSOC);
    $filteredParticipants = [];
    
    error_log("üîÑ [GENERATE_PROTOCOLS] –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è $class $sex {$distance}–º: " . count($allParticipants));
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
    foreach ($allParticipants as $participant) {
        $classDistanceData = json_decode($participant['discipline'], true);
        
        if (isset($classDistanceData[$class]['dist'])) {
            $distances = is_array($classDistanceData[$class]['dist']) 
                ? $classDistanceData[$class]['dist'] 
                : explode(', ', $classDistanceData[$class]['dist']);
            
            foreach ($distances as $dist) {
                if (trim($dist) == $distance) {
                    $filteredParticipants[] = $participant;
                    break;
                }
            }
        }
    }
    
    return $filteredParticipants;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
 */
function createProtocolForAgeGroup($redis, $meroId, $class, $sex, $distance, $ageGroup, $participants, $type, $protocolNumber = 1) {
    // –ü—Ä–æ–≤–æ–¥–∏–º –∂–µ—Ä–µ–±—å–µ–≤–∫—É
    $drawnParticipants = conductDrawForProtocol($participants);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á Redis —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø–æ–π
    $ageGroupKey = str_replace(['(', ')', ' ', ':', '-'], ['', '', '_', '_', '_'], $ageGroup);
    $redisKey = "protocol:{$type}:{$meroId}:{$class}:{$sex}:{$distance}:{$ageGroupKey}";
    
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ example.json
    $protocolData = [
        'meroId' => (int)$meroId,
        'discipline' => $class,
        'sex' => $sex,
        'distance' => $distance,
        'ageGroups' => [
            [
                'name' => $ageGroup,
                'protocol_number' => $protocolNumber,
                'participants' => $drawnParticipants,
                'redisKey' => $redisKey,
                'protected' => false
            ]
        ],
        'created_at' => date('Y-m-d H:i:s')
    ];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if ($redis) {
        try {
            $redis->setex($redisKey, 86400 * 7, json_encode($protocolData)); // –•—Ä–∞–Ω–∏–º 7 –¥–Ω–µ–π
            error_log("‚úÖ [GENERATE_PROTOCOLS] –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Redis: $redisKey");
        } catch (Exception $e) {
            error_log("‚ö†Ô∏è [GENERATE_PROTOCOLS] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis: " . $e->getMessage());
        }
    } else {
        error_log("‚ö†Ô∏è [GENERATE_PROTOCOLS] Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à–µ");
    }
    
    // –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
    try {
        createJsonProtocol($protocolData, $meroId, $class, $sex, $distance, $ageGroupKey);
    } catch (Exception $e) {
        error_log("‚ö†Ô∏è [GENERATE_PROTOCOLS] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JSON: " . $e->getMessage());
    }
    
    return [
        'redisKey' => $redisKey,
        'discipline' => $class,
        'sex' => $sex,
        'distance' => $distance,
        'ageGroup' => $ageGroup,
        'participantsCount' => count($drawnParticipants),
        'type' => $type,
        'protocolNumber' => $protocolNumber,
        'file' => "/lks/files/json/protocols/{$type}_{$meroId}_{$class}_{$sex}_{$distance}_{$ageGroupKey}.json"
    ];
}

/**
 * –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∂–µ—Ä–µ–±—å–µ–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
function conductDrawForProtocol($participants) {
    $drawnParticipants = [];
    $lane = 1;
    
    if (empty($participants)) {
        error_log("‚ö†Ô∏è [GENERATE_PROTOCOLS] –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏");
        return [];
    }
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    shuffle($participants);
    
    foreach ($participants as $participant) {
        $drawnParticipants[] = [
            'userId' => (int)($participant['userid'] ?? 0),
            'fio' => $participant['fio'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            'sex' => $participant['sex'] ?? '',
            'birthdata' => $participant['birthdata'] ?? '',
            'sportzvanie' => $participant['sportzvanie'] ?? '–ë–†',
            'teamName' => $participant['teamname'] ?? '',
            'teamCity' => $participant['teamcity'] ?? '',
            'lane' => $lane++,
            'place' => null,
            'finishTime' => null,
            'addedManually' => false,
            'addedAt' => date('Y-m-d H:i:s')
        ];
    }
    
    error_log("üîÑ [GENERATE_PROTOCOLS] –ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –¥–ª—è " . count($drawnParticipants) . " —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
    
    return $drawnParticipants;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
 */
function createJsonProtocol($protocolData, $meroId, $class, $sex, $distance, $ageGroupKey) {
    $fileName = "{$meroId}_{$class}_{$sex}_{$distance}_{$ageGroupKey}.json";
    $filePath = __DIR__ . "/../../files/json/protocols/$fileName";
    
    // –°–æ–∑–¥–∞–µ–º .gitkeep —Ñ–∞–π–ª —á—Ç–æ–±—ã –ø–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–ª–∞—Å—å –≤ git
    $gitkeepFile = __DIR__ . "/../../files/json/protocols/.gitkeep";
    if (!file_exists($gitkeepFile)) {
        file_put_contents($gitkeepFile, "");
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    $dir = dirname($filePath);
    if (!is_dir($dir)) {
        if (!mkdir($dir, 0777, true)) {
            error_log("‚ö†Ô∏è [GENERATE_PROTOCOLS] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: $dir");
            return null;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
    if (!is_writable($dir)) {
        error_log("‚ö†Ô∏è [GENERATE_PROTOCOLS] –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: $dir");
        return null;
    }
    
    // –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
    if (file_put_contents($filePath, json_encode($protocolData, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE)) === false) {
        error_log("‚ö†Ô∏è [GENERATE_PROTOCOLS] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª: $filePath");
        return null;
    }
    
    error_log("‚úÖ [GENERATE_PROTOCOLS] –°–æ–∑–¥–∞–Ω JSON —Ñ–∞–π–ª –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: $fileName");
    return $fileName;
}
?> 