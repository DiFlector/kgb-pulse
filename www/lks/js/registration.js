/**
 * JavaScript –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ä–æ–ª–∏ –∏ —Ç–∏–ø—ã –ª–æ–¥–æ–∫
 */

class EventRegistration {
    constructor() {
        try {
            this.currentUser = null;
            this.selectedEvent = null;
            this.selectedClass = null;
            this.selectedSex = null;
            this.selectedDistance = null;
            this.selectedClasses = [];
            this.selectedSexes = [];
            this.selectedDistances = {};
            this.currentBoatType = null;
            this.boatType = null;
            this.maxParticipants = 1;
            this.canRegisterOthers = false;
            this.selectedParticipant = null;
            this.selectedTeamMembers = {};
            this.pendingClassQueue = [];
            
            this.init();
        } catch (error) {
            console.error('[18:04:55] ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ EventRegistration:', error);
            throw error;
        }
    }

    async init() {
        try {
            await this.loadUserInfo();
            await this.loadEvents();
            this.initEventHandlers();
        } catch (error) {
            console.error('[18:04:55] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            console.error('[18:04:55] üìã –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
            throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        }
    }

    async loadUserInfo() {
        try {
            const response = await fetch('/lks/php/user/get_registration_form.php?action=get_user_info');
            const data = await response.json();
            
            if (data.success) {
                this.currentUser = data.user;
                this.canRegisterOthers = data.can_register_others;
                this.updateUserInterface();
            } else {
                throw new Error(data.error);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
            throw error;
        }
    }

    async loadEvents() {
        try {
            const response = await fetch('/lks/php/user/get_registration_form.php?action=get_events');
            const data = await response.json();
            
            if (data.success) {
                this.renderEventsList(data.events);
            } else {
                throw new Error(data.error);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π');
        }
    }

    renderEventsList(events) {
        const container = document.getElementById('events-list');
        if (!container) return;

        if (events.length === 0) {
            container.innerHTML = '<div class="alert alert-info">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</div>';
            return;
        }

        let html = '<div class="row">';
        events.forEach(event => {
            const statusClass = this.getStatusClass(event.status);
            const date = this.parseEventDate(event.merodata);
            
            html += `
                <div class="col-md-6 col-lg-4 mb-3">
                    <div class="card h-100">
                        <div class="card-body">
                            <h6 class="card-title">${event.meroname}</h6>
                            <p class="card-text">
                                <small class="text-muted">
                                    <i class="bi bi-calendar me-1"></i>${date}
                                </small>
                            </p>
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="badge ${statusClass}">${event.status}</span>
                                <button class="btn btn-primary btn-sm" onclick="eventRegistration.selectEvent('${event.champn}')">
                                    <i class="bi bi-person-plus me-1"></i>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        });
        html += '</div>';
        container.innerHTML = html;
    }

    getStatusClass(status) {
        const statusClasses = {
            '–í –æ–∂–∏–¥–∞–Ω–∏–∏': 'bg-secondary',
            '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è': 'bg-success',
            '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞': 'bg-warning',
            '–í –ø—Ä–æ—Ü–µ—Å—Å–µ': 'bg-info',
            '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã': 'bg-primary',
            '–ó–∞–≤–µ—Ä—à–µ–Ω–æ': 'bg-dark'
        };
        return statusClasses[status] || 'bg-light';
    }

    parseEventDate(merodata) {
        if (!merodata) return '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
        const date = new Date(merodata);
        if (!isNaN(date.getTime())) {
            return date.toLocaleDateString('ru-RU');
        }
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return merodata;
    }

    async selectEvent(eventId) {
        try {
            const url = `/lks/php/user/get_registration_form.php?action=get_event_info&event_id=${eventId}`;
            const response = await fetch(url);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const text = await response.text();
            const data = JSON.parse(text);
            
            if (data.success) {
                this.selectedEvent = data.event;
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                const titleEl = document.getElementById('eventName');
                if (titleEl && this.selectedEvent && this.selectedEvent.meroname) {
                    titleEl.textContent = this.selectedEvent.meroname;
                }
                await this.loadEventClasses();
            } else {
                throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏');
        }
    }

    async loadEventClasses() {
        try {
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π action —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä–≤–µ—Ä—É: get_classes
            const url = `/lks/php/user/get_registration_form.php?action=get_classes&event_id=${this.selectedEvent.champn}`;
            const response = await fetch(url);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const text = await response.text();
            const data = JSON.parse(text);
            
            if (data.success) {
                await this.showRegistrationForm();
            } else {
                throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∞—Å—Å—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∞—Å—Å–æ–≤:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∞—Å—Å–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
        }
    }

    async showRegistrationForm() {
        // –†–µ–∂–∏–º 1: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä registration-form)
        const container = document.getElementById('registration-form');
        if (container) {
            container.innerHTML = `
                <div class="registration-form">
                    <h4>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${this.selectedEvent.meroname}</h4>
                    <div id="class-selection"></div>
                </div>
            `;
            await this.renderClassSelection();
            return;
        }

        // –†–µ–∂–∏–º 2: –º–æ–¥–∞–ª–∫–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞/—Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã)
        const existingClassContainer = document.getElementById('class-selection');
        if (existingClassContainer) {
            await this.renderClassSelection();
            // –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–µ–∫—Ü–∏–∏ –ø–æ–ª–∞ –∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–π –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            const sexSection = document.getElementById('sex-selection');
            if (sexSection && sexSection.parentElement) {
                sexSection.parentElement.classList.add('d-none');
            }
            const distSection = document.getElementById('distance-selection');
            if (distSection && distSection.parentElement) {
                distSection.parentElement.classList.add('d-none');
            }
            const participantsSection = document.getElementById('participant-form');
            if (participantsSection && participantsSection.parentElement) {
                participantsSection.parentElement.classList.add('d-none');
            }
        }
    }

    async renderClassSelection() {
        const container = document.getElementById('class-selection');
        if (!container) return;

        try {
            const response = await fetch(`/lks/php/user/get_registration_form.php?action=get_classes&event_id=${this.selectedEvent.champn}`);
            const data = await response.json();
            
            if (data.success) {
                const classes = data.classes;
                let html = '<div class="class-selection">';
                
                classes.forEach(classInfo => {
                    // –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞
                    const className = (classInfo.class || classInfo.class_name || '').toString();
                    const sexes = classInfo.sexes || classInfo.sex || [];
                    const distances = classInfo.distances || classInfo.dist || [];
                    const isSelected = this.selectedClasses.includes(className);
                    html += `
                        <div class="class-option mb-3 p-3 border rounded ${isSelected ? 'border-success bg-light' : 'border-secondary'}">
                            <div class="form-check">
                                <input class="form-check-input class-checkbox" 
                                       type="checkbox" 
                                       id="class_${className.replace(/[^a-zA-Z0-9]/g, '_')}" 
                                       data-class="${className}"
                                       ${isSelected ? 'checked' : ''}>
                                <label class="form-check-label fw-bold" for="class_${className.replace(/[^a-zA-Z0-9]/g, '_')}">
                                    ${className}
                                </label>
                            </div>
                            
                            <div class="class-details mt-2 ${isSelected ? '' : 'd-none'}">
                                <div class="row">
                                    <div class="col-md-6">
                                        <label class="form-label">–ü–æ–ª:</label>
                                        <div class="sex-options">
                    `;
                    
                    if (sexes && Array.isArray(sexes)) {
                        sexes.forEach(sex => {
                            const sexSelected = isSelected && this.selectedSexes.includes(sex);
                            html += `
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input sex-option" 
                                           type="checkbox" 
                                           data-class="${className}" 
                                           value="${sex}"
                                           ${sexSelected ? 'checked' : ''}>
                                    <label class="form-check-label">${sex}</label>
                                </div>
                            `;
                        });
                    }
                    
                    html += `
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">–î–∏—Å—Ç–∞–Ω—Ü–∏–∏:</label>
                                        <div class="distance-options">
                    `;
                    
                    if (distances && Array.isArray(distances)) {
                        distances.forEach(distance => {
                            const distSelected = isSelected && 
                                               this.selectedDistances[className] && 
                                               this.selectedDistances[className].includes(distance);
                            html += `
                                <div class="form-check">
                                    <input class="form-check-input dist-option" 
                                           type="checkbox" 
                                           data-class="${className}" 
                                           value="${distance}"
                                           ${distSelected ? 'checked' : ''}>
                                    <label class="form-check-label">${distance}</label>
                                </div>
                            `;
                        });
                    }
                    
                    html += `
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                });
                
                html += `
                    <div class="d-flex justify-content-end gap-2 mt-3">
                        <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                        <button type="button" class="btn btn-primary btn-sm" id="regProceedBtn">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
                    </div>
                </div>`;
                container.innerHTML = html;
                
                this.setupClassHandlers();

                const proceedBtn = document.getElementById('regProceedBtn');
                if (proceedBtn) {
                    proceedBtn.addEventListener('click', () => this.handleProceed());
                }
            } else {
                throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∞—Å—Å—ã');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤:', error);
            container.innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∞—Å—Å–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</div>';
        }
    }

    async handleProceed() {
        try {
            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
            const checkedClasses = Array.from(document.querySelectorAll('.class-checkbox:checked'));
            if (checkedClasses.length === 0) {
                this.showInlineMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –ª–æ–¥–∫–∏');
                return;
            }
            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            this.pendingClassQueue = checkedClasses.map(el => el.dataset.class);
            const className = this.pendingClassQueue.shift();

            // –ü–æ–ª: –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å MIX –≤–º–µ—Å—Ç–µ —Å –ú –∏–ª–∏ –ñ, –Ω–æ –Ω–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ú –∏ –ñ
            const checkedSexes = Array.from(document.querySelectorAll(`.sex-option[data-class="${className}"]:checked`)).map(el => el.value);
            if (checkedSexes.length === 0) {
                this.showInlineMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª');
                return;
            }
            const unique = new Set(checkedSexes.map(s => s.toUpperCase()));
            if (unique.has('–ú') && unique.has('–ñ')) {
                this.showInlineMessage('–ù–µ–ª—å–∑—è –≤—ã–±–∏—Ä–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ú –∏ –ñ. –†–∞–∑—Ä–µ—à–µ–Ω–æ –ú+MIX –∏–ª–∏ –ñ+MIX.');
                return;
            }
            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –¥–≤–∞ ‚Äî —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å MIX + –±–∞–∑–æ–≤—ã–π –ø–æ–ª. –ü–µ—Ä–µ–¥–∞–¥–∏–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –±–∞–∑–æ–≤—ã–π –ø–æ–ª, MIX —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –ª–æ–≥–∏–∫–µ –∫–ª–∞—Å—Å–æ–≤
            const sex = unique.has('–ú') ? '–ú' : (unique.has('–ñ') ? '–ñ' : 'MIX');

            // –î–∏—Å—Ç–∞–Ω—Ü–∏–∏ (–æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
            const checkedDistances = Array.from(document.querySelectorAll(`.dist-option[data-class="${className}"]:checked`)).map(el => el.value);
            if (checkedDistances.length === 0) {
                this.showInlineMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–∏—Å—Ç–∞–Ω—Ü–∏—é');
                return;
            }
            const distanceCsv = checkedDistances.join(', ');

            // –£–∑–Ω–∞—ë–º —Ç–∏–ø –ª–æ–¥–∫–∏
            const boatTypeResp = await fetch(`/lks/php/user/get_registration_form.php?action=get_boat_type&class=${encodeURIComponent(className)}`);
            const boatTypeData = await boatTypeResp.json();
            const boatType = boatTypeData && boatTypeData.boat_type ? boatTypeData.boat_type : 'solo';

            const maxParticipants = (boatTypeData && boatTypeData.max_participants) ? boatTypeData.max_participants : 1;

            // –í –ø–∞–Ω–µ–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É (–¥–∞–∂–µ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –ª–æ–¥–∫–∏)
            const isOrganizer = ['Organizer', 'Admin', 'SuperUser'].includes(window.userRole);
            if (maxParticipants <= 1 && !isOrganizer) {
                // –û–¥–∏–Ω–æ—á–Ω—ã–µ –ª–æ–¥–∫–∏ ‚Äî –¥–ª—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
                await this.submitRegistration({
                    event_id: this.selectedEvent.champn,
                    class: className,
                    sex: sex,
                    distance: distanceCsv
                });
                return;
            }

            await this.showParticipantsForm({
                className,
                sex,
                distances: checkedDistances,
                boatType,
                maxParticipants
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞:', error);
            this.showInlineMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
        }
    }

    async submitRegistration(payload) {
        try {
            const response = await fetch('/lks/php/user/register_to_event.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });
            const data = await response.json();
            if (data && data.success) {
                this.showSuccess('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: "–í –æ—á–µ—Ä–µ–¥–∏".');
            } else {
                this.showError((data && (data.message || data.error)) || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        }
    }

    showInlineMessage(message, type = 'danger') {
        const container = document.getElementById('class-selection');
        if (!container) return;
        const color = type === 'warning' ? 'warning' : (type === 'success' ? 'success' : 'danger');
        const info = document.createElement('div');
        info.className = `alert alert-${color} mt-2`;
        // –ù–∞–º –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Å—ã–ª–∫—É, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º innerHTML.
        // –ò—Å—Ç–æ—á–Ω–∏–∫ message –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –≤ –∫–æ–¥–µ (–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥).
        info.innerHTML = message;
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        Array.from(container.querySelectorAll('.alert')).forEach(el => el.remove());
        container.prepend(info);
    }

    async showParticipantsForm({ className, sex, distances, boatType, maxParticipants }) {
        const modalBody = document.querySelector('#registrationModal .modal-body');
        if (!modalBody) return;

        const discipline = `${className}_${sex}`;
        const isOrganizer = ['Organizer', 'Admin', 'SuperUser'].includes(window.userRole);

        const buildHeader = (isChecked) => `
            <div class="mb-3">
                <div class="d-flex align-items-center justify-content-between flex-wrap gap-2">
                    <div>
                        <h6 class="mb-1">–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: <span class="badge bg-primary">${discipline}</span></h6>
                        <small class="text-muted">–î–∏—Å—Ç–∞–Ω—Ü–∏–∏: ${distances.join(', ')}–º</small>
                    </div>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="teamModeToggle" ${isChecked ? 'checked' : ''}>
                        <label class="form-check-label" for="teamModeToggle">–†–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –≤—Å–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏</label>
                    </div>
                </div>
            </div>
        `;

        const isDragon = (className && /D-?10/i.test(className));
        const roleForSlot = (slot) => {
            if (!isDragon) return '';
            if (slot === 11) return 'coxswain';
            if (slot === 12) return 'drummer';
            if (slot === 13 || slot === 14) return 'reserve';
            return '';
        };
        const titleForSlot = (slot) => {
            if (!isDragon) return `–£—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ ${slot}`;
            if (slot === 11) return '–†—É–ª–µ–≤–æ–π';
            if (slot === 12) return '–ë–∞—Ä–∞–±–∞–Ω—â–∏–∫';
            if (slot === 13) return '–ó–∞–ø–∞—Å–Ω–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ 1';
            if (slot === 14) return '–ó–∞–ø–∞—Å–Ω–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ 2';
            return `–ì—Ä–µ–±–µ—Ü ‚Ññ ${slot}`;
        };

        const buildParticipantFields = (dist, idx) => {
            const baseId = `d${dist}_p${idx}`;
            return `
                <div class="card h-100">
                    <div class="card-header py-2"><strong>${titleForSlot(idx)}</strong></div>
                    <div class="card-body py-2">
                        <div class="row g-2">
                            <div class="col-md-6">
                                <label class="form-label mb-1">–§–ò–û</label>
                                <input type="text" class="form-control form-control-sm" id="${baseId}_fio">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label mb-1">–ü–æ—á—Ç–∞</label>
                                <input type="email" class="form-control form-control-sm" id="${baseId}_email" data-lookup="email" data-dist="${dist}" data-idx="${idx}">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label mb-1">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                                <input type="tel" class="form-control form-control-sm" id="${baseId}_phone" data-lookup="phone" data-dist="${dist}" data-idx="${idx}">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label mb-1">–ù–æ–º–µ—Ä —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞</label>
                                <input type="text" class="form-control form-control-sm" id="${baseId}_sport" data-lookup="sport_number" data-dist="${dist}" data-idx="${idx}">
                            </div>
                            ${roleForSlot(idx) ? `<input type="hidden" id="${baseId}_role" value="${roleForSlot(idx)}">` : ''}
                        </div>
                    </div>
                </div>
            `;
        };

        const renderDistanceSection = (dist, labelOverride = null) => {
            const teamBlock = `
                <div class="mb-3">
                    <div class="d-flex align-items-center justify-content-between flex-wrap gap-2">
                        <h6 class="mb-0">–î–∏—Å—Ç–∞–Ω—Ü–∏—è: <span class="badge bg-secondary">${labelOverride ? labelOverride : dist + '–º'}</span></h6>
                        <small class="text-muted">–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —ç—Ç–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ (–≤—Å–µ–≥–æ ${maxParticipants} —É—á–∞—Å—Ç–Ω–∏–∫–∞${maxParticipants > 1 ? '(-–æ–≤)' : ''})</small>
                    </div>
                </div>
                <div class="row g-3 mb-2" data-team-scope="${dist}">
                    <div class="col-md-6">
                        <label class="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</label>
                        <input type="text" class="form-control" id="team_${dist}_name">
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">–ì–æ—Ä–æ–¥ –∫–æ–º–∞–Ω–¥—ã</label>
                        <input type="text" class="form-control" id="team_${dist}_city">
                    </div>
                </div>
            `;

            let participantsHtml = '<div class="row g-3 row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4">';
            for (let i = 1; i <= maxParticipants; i++) {
                participantsHtml += `<div class="col">${buildParticipantFields(dist, i)}</div>`;
            }
            participantsHtml += '</div>';

            return `
                <section class="mb-4 distance-section" id="distance_${dist}" data-distance="${dist}">
                    ${teamBlock}
                    ${participantsHtml}
                </section>
            `;
        };

        let contentHtml = '';
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é (single team) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω—É —Å–µ–∫—Ü–∏—é ‚Äî —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –≤—Å–µ—Ö –¥–∏—Å—Ç–∞–Ω—Ü–∏–π
        contentHtml += renderDistanceSection(distances[0], distances.join(', ') + '–º');

        const footerHtml = `
            <div class="d-flex justify-content-between flex-wrap gap-2 align-items-center">
                <div class="text-muted small">–°–æ–≤–µ—Ç: –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∏—Ç —Å—Ç–∞—Ç—É—Å \"–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã\". –ü–æ–ª–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º \"–í –æ—á–µ—Ä–µ–¥–∏\".</div>
                <div class="ms-auto d-flex gap-2">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                    <button type="button" class="btn btn-primary" id="submitParticipantsBtn">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</button>
                </div>
            </div>
        `;

        modalBody.innerHTML = buildHeader(false) + contentHtml + footerHtml;

        // –î–ª—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–∞–∂–¥–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
        if (!isOrganizer && this.currentUser) {
            distances.forEach((dist) => {
                const baseId = `d${dist}_p1`;
                const u = this.currentUser;
                const byId = (id) => document.getElementById(id);
                if (byId(`${baseId}_fio`)) byId(`${baseId}_fio`).value = u.fio || '';
                if (byId(`${baseId}_email`)) byId(`${baseId}_email`).value = u.email || '';
                if (byId(`${baseId}_phone`)) byId(`${baseId}_phone`).value = u.telephone || '';
                if (byId(`${baseId}_sport`)) byId(`${baseId}_sport`).value = (u.sport_number || u.userid || '').toString();
            });
        }

        // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ email/phone/sport_number
        this.bindParticipantAutoFill();

        // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (single-team –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        const initialSubmitBtn = document.getElementById('submitParticipantsBtn');
        initialSubmitBtn.addEventListener('click', () => this.submitParticipants({ className, sex, distances, maxParticipants }));

        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º (single vs multi)
        const teamToggle = document.getElementById('teamModeToggle');
        const renderMode = () => {
            const currentToggle = document.getElementById('teamModeToggle');
            const singleTeam = !currentToggle.checked;
            const container = document.querySelector('#registrationModal .modal-body');
            if (!container) return;

            // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —Å–µ–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
            const copyFromDist = distances[0];
            const copyName = document.getElementById(`team_${copyFromDist}_name`)?.value || '';
            const copyCity = document.getElementById(`team_${copyFromDist}_city`)?.value || '';

            let html = '';
            if (singleTeam) {
                // –û—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–Ω—É —Å–µ–∫—Ü–∏—é —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –≤—Å–µ—Ö –¥–∏—Å—Ç–∞–Ω—Ü–∏–π
                html = buildHeader(false) + renderDistanceSection(distances[0], distances.join(', ') + '–º') + footerHtml;
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –¥–∏—Å—Ç–∞–Ω—Ü–∏–π
                let sections = '';
                distances.forEach(d => { sections += renderDistanceSection(d); });
                html = buildHeader(true) + sections + footerHtml;
            }
            modalBody.innerHTML = html;

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            const firstNameEl = document.getElementById(`team_${distances[0]}_name`);
            const firstCityEl = document.getElementById(`team_${distances[0]}_city`);
            if (firstNameEl) firstNameEl.value = copyName;
            if (firstCityEl) firstCityEl.value = copyCity;

            // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ submit –ø–æ–≤—Ç–æ—Ä–Ω–æ
            if (!isOrganizer && this.currentUser) {
                const u = this.currentUser;
                const fillFirst = (dist) => {
                    const baseId = `d${dist}_p1`;
                    const byId = (id) => document.getElementById(id);
                    if (byId(`${baseId}_fio`)) byId(`${baseId}_fio`).value = u.fio || '';
                    if (byId(`${baseId}_email`)) byId(`${baseId}_email`).value = u.email || '';
                    if (byId(`${baseId}_phone`)) byId(`${baseId}_phone`).value = u.telephone || '';
                    if (byId(`${baseId}_sport`)) byId(`${baseId}_sport`).value = (u.sport_number || u.userid || '').toString();
                };
                if (singleTeam) fillFirst(distances[0]); else distances.forEach(fillFirst);
            }

            this.bindParticipantAutoFill();

            const submitBtn = document.getElementById('submitParticipantsBtn');
            submitBtn.addEventListener('click', () => this.submitParticipants({ className, sex, distances, maxParticipants }));

            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–≤–µ—Å–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
            document.getElementById('teamModeToggle').addEventListener('change', renderMode);
        };
        teamToggle.addEventListener('change', renderMode);
        // –ø–µ—Ä–≤–∏—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—à–µ (single-team –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

        // Submit
        const submitBtn = document.getElementById('submitParticipantsBtn');
        submitBtn.addEventListener('click', () => this.submitParticipants({ className, sex, distances, maxParticipants }));
    }

    bindParticipantAutoFill() {
        const inputs = document.querySelectorAll('#registrationModal [data-lookup]');
        inputs.forEach((input) => {
            let debounceTimer = null;
            const handler = async (e) => {
                const el = e.target;
                const type = el.getAttribute('data-lookup'); // email | phone | sport_number
                const value = (el.value || '').trim();
                const dist = el.getAttribute('data-dist');
                const idx = el.getAttribute('data-idx');
                if (!value) return;
                try {
                    const resp = await fetch(`/lks/php/user/get_registration_form.php?action=search_users_secure&search_by=${encodeURIComponent(type)}&query=${encodeURIComponent(value)}`);
                    const data = await resp.json();
                    if (data && data.success && data.user) {
                        const baseId = `d${dist}_p${idx}`;
                        const byId = (id) => document.getElementById(id);
                        const u = data.user;
                        if (byId(`${baseId}_fio`)) byId(`${baseId}_fio`).value = u.fio || '';
                        if (byId(`${baseId}_email`)) byId(`${baseId}_email`).value = u.email || '';
                        if (byId(`${baseId}_phone`)) byId(`${baseId}_phone`).value = u.telephone || '';
                        if (byId(`${baseId}_sport`)) byId(`${baseId}_sport`).value = (u.userid || '').toString();
                    }
                } catch (err) {
                    console.error('–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å:', err);
                }
            };
            // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –±–ª—é—Ä—É
            input.addEventListener('blur', handler);
            // –ê —Ç–∞–∫–∂–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–≤–æ–¥–∞
            input.addEventListener('input', (e) => {
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(() => handler(e), 1000);
            });
        });
    }

    async submitParticipants({ className, sex, distances, maxParticipants }) {
        try {
            const teamToggle = document.getElementById('teamModeToggle');
            const teamMode = teamToggle && teamToggle.checked ? 'multi_team' : 'single_team';
            const firstDist = distances[0];
            // –ï—Å–ª–∏ –µ–¥–∏–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –≤—Å–µ—Ö –¥–∏—Å—Ç–∞–Ω—Ü–∏–π ‚Äî –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–π —Å–µ–∫—Ü–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –Ω–∞ –∫–∞–∂–¥—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
            if (teamMode === 'single_team') {
                const teamNameCommon = (document.getElementById(`team_${firstDist}_name`)?.value || '').trim();
                const teamCityCommon = (document.getElementById(`team_${firstDist}_city`)?.value || '').trim();
                const rows = [];
                for (let i = 1; i <= maxParticipants; i++) {
                    const baseId = `d${firstDist}_p${i}`;
                    const fio = document.getElementById(`${baseId}_fio`)?.value?.trim() || '';
                    const email = document.getElementById(`${baseId}_email`)?.value?.trim() || '';
                    const phone = document.getElementById(`${baseId}_phone`)?.value?.trim() || '';
                    const sport = document.getElementById(`${baseId}_sport`)?.value?.trim() || '';
                    const role = document.getElementById(`${baseId}_role`)?.value || '';
                    if (!fio && !email && !phone && !sport) continue;
                    rows.push({ slot: i, fio, email, phone, sport, role });
                }
                for (const dist of distances) {
                    for (let idx = 0; idx < rows.length; idx++) {
                        const r = rows[idx];
                        const payload = {
                            event_id: this.selectedEvent.champn,
                            class: className,
                            sex: sex,
                            distance: String(dist),
                            participant_data: {
                                fio: r.fio,
                                email: r.email,
                                phone: r.phone,
                                sport_number: r.sport,
                                team_role: r.role || undefined
                            },
                            team_name: teamNameCommon,
                            team_city: teamCityCommon,
                            team_mode: teamMode
                        };
                        const resp = await fetch('/lks/php/user/register_to_event.php', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(payload)
                        });
                        const data = await resp.json();
                        if (!data || !data.success) {
                            const msg = (data && (data.message || data.error)) || `–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ‚Ññ${idx + 1} –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ ${dist}`;
                            this.showInlineMessage(msg);
                            return;
                        }
                    }
                }
            } else {
                // –†–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã/—Ñ–æ—Ä–º—ã –Ω–∞ –∫–∞–∂–¥—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é ‚Äî —Å–æ–±–∏—Ä–∞–µ–º –ø–æ –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
                for (const dist of distances) {
                    const teamName = (document.getElementById(`team_${dist}_name`)?.value || '').trim();
                    const teamCity = (document.getElementById(`team_${dist}_city`)?.value || '').trim();
                    for (let i = 1; i <= maxParticipants; i++) {
                        const baseId = `d${dist}_p${i}`;
                        const fio = document.getElementById(`${baseId}_fio`)?.value?.trim() || '';
                        const email = document.getElementById(`${baseId}_email`)?.value?.trim() || '';
                        const phone = document.getElementById(`${baseId}_phone`)?.value?.trim() || '';
                        const sport = document.getElementById(`${baseId}_sport`)?.value?.trim() || '';
                        const role = document.getElementById(`${baseId}_role`)?.value || '';
                        if (!fio && !email && !phone && !sport) continue;
                        const payload = {
                            event_id: this.selectedEvent.champn,
                            class: className,
                            sex: sex,
                            distance: String(dist),
                            participant_data: { fio, email, phone, sport_number: sport, team_role: role || undefined },
                            team_name: teamName,
                            team_city: teamCity,
                            team_mode: teamMode
                        };
                        const resp = await fetch('/lks/php/user/register_to_event.php', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(payload)
                        });
                        const data = await resp.json();
                        if (!data || !data.success) {
                            const msg = (data && (data.message || data.error)) || `–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ‚Ññ${i} –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ ${dist}`;
                            this.showInlineMessage(msg);
                            return;
                        }
                    }
                }
            }
            // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –∫–ª–∞—Å—Å—ã –≤ –æ—á–µ—Ä–µ–¥–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ
            if (this.pendingClassQueue && this.pendingClassQueue.length > 0) {
                const nextClass = this.pendingClassQueue.shift();
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–∞ –∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–π
                const checkedDistances = Array.from(document.querySelectorAll('.dist-option[data-class="' + nextClass + '"]:checked')).map(el => el.value);
                // –ï—Å–ª–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –Ω–µ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã (UI —Å–±—Ä–æ—à–µ–Ω), –∑–∞–ø—Ä–æ—Å–∏–º –∏—Ö –∑–∞–Ω–æ–≤–æ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
                let finalDistances = checkedDistances;
                if (finalDistances.length === 0) {
                    try {
                        const resp = await fetch(`/lks/php/user/get_registration_form.php?action=get_classes&event_id=${this.selectedEvent.champn}`);
                        const data = await resp.json();
                        const cls = (data.classes || []).find(c => (c.class || c.class_name) === nextClass);
                        if (cls) {
                            finalDistances = (cls.distances || cls.dist || []).slice(0, 1);
                        }
                    } catch {}
                }
                // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ API, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                let nextMax = 1;
                try {
                    const btResp = await fetch(`/lks/php/user/get_registration_form.php?action=get_boat_type&class=${encodeURIComponent(nextClass)}`);
                    const btData = await btResp.json();
                    nextMax = (btData && btData.max_participants) ? btData.max_participants : 1;
                } catch {}
                await this.showParticipantsForm({
                    className: nextClass,
                    sex,
                    distances: finalDistances.length ? finalDistances : ['200'],
                    boatType: 'team',
                    maxParticipants: nextMax
                });
                return;
            }
            // –ò–Ω–∞—á–µ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
            this.showSuccess('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
            try {
                const modalEl = document.getElementById('registrationModal');
                if (modalEl && bootstrap && bootstrap.Modal) {
                    const modal = bootstrap.Modal.getInstance(modalEl) || new bootstrap.Modal(modalEl);
                    modal.hide();
                }
            } catch {}
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏:', err);
            this.showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏');
        }
    }

    setupClassHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ –∫–ª–∞—Å—Å–æ–≤
        document.querySelectorAll('.class-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                const className = e.target.dataset.class;
                const isChecked = e.target.checked;
                
                if (isChecked) {
                    this.selectedClasses.push(className);
                    this.selectedDistances[className] = [];
                    e.target.closest('.class-option').classList.add('border-success', 'bg-light');
                    e.target.closest('.class-option').classList.remove('border-secondary');
                    e.target.closest('.class-option').querySelector('.class-details').classList.remove('d-none');
                } else {
                    const index = this.selectedClasses.indexOf(className);
                    if (index > -1) {
                        this.selectedClasses.splice(index, 1);
                    }
                    delete this.selectedDistances[className];
                    e.target.closest('.class-option').classList.remove('border-success', 'bg-light');
                    e.target.closest('.class-option').classList.add('border-secondary');
                    e.target.closest('.class-option').querySelector('.class-details').classList.add('d-none');
                    
                    // –°–Ω–∏–º–∞–µ–º –≤—Å–µ –ø–æ–¥—á–µ–∫–±–æ–∫—Å—ã
                    const details = e.target.closest('.class-option').querySelector('.class-details');
                    details.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–æ–≤
        document.querySelectorAll('.sex-option').forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                const sex = e.target.value; // '–ú', '–ñ' –∏–ª–∏ 'MIX'
                const className = e.target.dataset.class;
                const isMix = sex.toUpperCase() === 'MIX';

                if (e.target.checked) {
                    // –ü—Ä–∞–≤–∏–ª–æ: –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å MIX –≤–º–µ—Å—Ç–µ —Å –ú –ò–õ–ò –ñ, –Ω–æ –Ω–µ–ª—å–∑—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ú –∏ –ñ
                    if (!isMix) {
                        // –°–Ω–∏–º–∞–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –±–∞–∑–æ–≤—ã–π –ø–æ–ª –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–≥–æ –∂–µ –∫–ª–∞—Å—Å–∞
                        const opposite = sex === '–ú' ? '–ñ' : '–ú';
                        const oppositeEl = document.querySelector(`.sex-option[data-class="${className}"][value="${opposite}"]`);
                        if (oppositeEl && oppositeEl.checked) {
                            oppositeEl.checked = false;
                            const oppIndex = this.selectedSexes.indexOf(opposite);
                            if (oppIndex > -1) this.selectedSexes.splice(oppIndex, 1);
                        }
                    }

                    if (!this.selectedSexes.includes(sex)) {
                        this.selectedSexes.push(sex);
                    }
                } else {
                    const index = this.selectedSexes.indexOf(sex);
                    if (index > -1) {
                        this.selectedSexes.splice(index, 1);
                    }
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏—Å—Ç–∞–Ω—Ü–∏–π
        document.querySelectorAll('.dist-option').forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                const distance = e.target.value;
                const className = e.target.dataset.class;
                
                if (!this.selectedDistances[className]) {
                    this.selectedDistances[className] = [];
                }
                
                if (e.target.checked) {
                    if (!this.selectedDistances[className].includes(distance)) {
                        this.selectedDistances[className].push(distance);
                    }
                } else {
                    const index = this.selectedDistances[className].indexOf(distance);
                    if (index > -1) {
                        this.selectedDistances[className].splice(index, 1);
                    }
                }
            });
        });
    }

    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ console.log
    // –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é –≤–µ—Å—å —Ñ–∞–π–ª, –Ω–æ –≤—Å–µ console.log –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã
    // –∫—Ä–æ–º–µ console.error –¥–ª—è –æ—à–∏–±–æ–∫

    initEventHandlers() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    }

    resetForm() {
        this.selectedEvent = null;
        this.selectedClasses = [];
        this.selectedSexes = [];
        this.selectedDistances = {};
        
        const container = document.getElementById('registration-form');
        if (container) {
            container.innerHTML = '';
        }
        const modalBody = document.querySelector('#registrationModal .modal-body');
        if (modalBody) {
            modalBody.innerHTML = '';
        }
    }

    resetFormKeepEvent() {
        this.selectedClasses = [];
        this.selectedSexes = [];
        this.selectedDistances = {};
        
        const container = document.getElementById('class-selection');
        if (container) {
            container.innerHTML = '';
        }
    }

    updateUserInterface() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }

    showError(message) {
        // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–≤–µ—Å—Ç–∏ –≤ –±–ª–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const container = document.getElementById('registration-form');
        if (container) {
            container.innerHTML = `
                <div class="alert alert-danger">
                    <h6><i class="bi bi-exclamation-triangle me-2"></i>–û—à–∏–±–∫–∞</h6>
                    <p>${message}</p>
                    <button class="btn btn-outline-danger btn-sm" onclick="eventRegistration.resetForm()">
                        <i class="bi bi-arrow-clockwise me-1"></i> –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            `;
            return;
        }
        // –§–æ–ª–ª–±–µ–∫ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        const modalBody = document.querySelector('#registrationModal .modal-body');
        if (modalBody) {
            modalBody.innerHTML = `
                <div class="alert alert-danger m-0">
                    <h6 class="mb-2"><i class="bi bi-exclamation-triangle me-2"></i>–û—à–∏–±–∫–∞</h6>
                    <p class="mb-3">${message}</p>
                    <button class="btn btn-outline-danger btn-sm" onclick="eventRegistration.resetForm()">
                        <i class="bi bi-arrow-clockwise me-1"></i> –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            `;
        }
    }

    showSuccess(message) {
        const container = document.getElementById('registration-form');
        if (container) {
            container.innerHTML = `
                <div class="alert alert-success">
                    <h6><i class="bi bi-check-circle me-2"></i>–£—Å–ø–µ—à–Ω–æ</h6>
                    <p>${message}</p>
                    <button class="btn btn-outline-success btn-sm" onclick="eventRegistration.resetForm()">
                        <i class="bi bi-plus-circle me-1"></i> –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                    </button>
                </div>
            `;
            return;
        }
        const modalBody = document.querySelector('#registrationModal .modal-body');
        if (modalBody) {
            modalBody.innerHTML = `
                <div class="alert alert-success m-0">
                    <h6 class="mb-2"><i class="bi bi-check-circle me-2"></i>–£—Å–ø–µ—à–Ω–æ</h6>
                    <p class="mb-3">${message}</p>
                    <button class="btn btn-outline-success btn-sm" onclick="eventRegistration.resetForm()">
                        <i class="bi bi-plus-circle me-1"></i> –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                    </button>
                </div>
            `;
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.eventRegistration = new EventRegistration(); 