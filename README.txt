# KGB-Pulse - Система управления гребной базой

## Описание проекта

KGB-Pulse - это веб-приложение для управления соревнованиями по гребле на различных типах лодок (дракон, каноэ, байдарки, сапы и др.). Система предназначена для автоматизации процессов регистрации участников, проведения соревнований и ведения протоколов.

## Технический стек

- **Backend**: PHP 8.2, PostgreSQL 15, Redis
- **Frontend**: HTML5, CSS3, JavaScript, Bootstrap 5, jQuery
- **Инфраструктура**: Docker, Nginx, Cron
- **Безопасность**: SSL/TLS, CSRF защита, валидация данных
- **Email**: PHPMailer с SMTP (Yandex)

## Требования к системе

### Минимальные требования:
- Docker Engine 20.10+
- Docker Compose 2.0+
- 4 GB RAM
- 20 GB свободного места на диске
- Интернет соединение для установки зависимостей

### Рекомендуемые требования:
- 8 GB RAM
- 100 GB SSD
- CPU 4+ ядер

## Установка и развертывание

### 1. Клонирование проекта
```bash
git clone <repository-url>
cd Pulse
```

### 2. Настройка переменных окружения
```bash
# Скопировать пример конфигурации
cp env.example .env

# Отредактировать файл .env:
nano .env
```

Обязательно настройте следующие параметры:
- `DB_PASSWORD` - пароль для PostgreSQL
- `SMTP_PASSWORD` - пароль для отправки email
- `JWT_SECRET` - секретный ключ для токенов
- `CSRF_SECRET` - секретный ключ для CSRF защиты

### 3. Запуск системы
```bash
# Сборка и запуск всех контейнеров
docker-compose up -d

# Проверка статуса контейнеров
docker-compose ps
```

### 4. Инициализация базы данных
База данных автоматически инициализируется при первом запуске из файлов:
- `data/db/01_init.sql` - создание структуры БД
- `data/db/02_seed_users.sql` - предустановленные пользователи

### 5. Доступ к системе
- **Веб-интерфейс**: http://localhost (или ваш домен)
- **pgAdmin**: http://localhost:5050 (только для локального доступа)
  - Email: admin@example.com
  - Пароль: admin

## Предустановленные пользователи

### Администратор
- **Email**: canoe-kupavna@yandex.ru
- **Пароль**: password123
- **Роль**: Главный администратор
- **Описание**: Полный доступ ко всем функциям системы

### Организатор
- **Email**: andsa11@yandex.ru
- **Пароль**: password123
- **Роль**: Главный организатор
- **Описание**: Создание и управление мероприятиями

### Секретари
- **Email**: mrazzlotov@yandex.com / matt.koshkin2000@gmail.com
- **Пароль**: password123
- **Роль**: Главный секретарь
- **Описание**: Проведение соревнований, жеребьевка, протоколы

## Структура проекта

```
Pulse/
├── docker-compose.yaml       # Конфигурация Docker контейнеров
├── .env                      # Переменные окружения (создать из env.example)
├── .gitignore               # Исключения для Git
├── README.txt               # Этот файл
├── nginx/                   # Конфигурация Nginx
│   ├── nginx.conf
│   └── sites-available/
├── images/                  # Docker образы
│   ├── php/                # PHP-FPM контейнер
│   └── cron/               # Cron контейнер
├── data/                   # Данные приложения
│   └── db/                 # SQL скрипты инициализации
├── scripts/                # Скрипты обслуживания
│   ├── backup_database.sh  # Резервное копирование БД
│   └── auto_close_registration.php # Автозакрытие регистрации
├── logs/                   # Логи приложения
└── www/lks/               # Веб-приложение
    ├── css/               # Стили
    ├── js/                # JavaScript
    ├── images/            # Изображения
    ├── php/               # Backend PHP
    ├── enter/             # Авторизованная зона
    └── files/             # Загруженные файлы
```

## Основные функции системы

### Роли пользователей

1. **Администратор** (userid: 1-50)
   - Управление пользователями и ролями
   - Управление классами лодок
   - Файловый менеджер
   - Техническая страница работы с данными
   - Системная статистика

2. **Организатор** (userid: 51-150)
   - Создание и управление мероприятиями
   - Управление регистрациями
   - Экспорт данных
   - Календарь соревнований

3. **Секретарь** (userid: 151-250)
   - Проведение мероприятий
   - Жеребьевка участников
   - Создание протоколов
   - Формирование результатов

4. **Спортсмен** (userid: 1000+)
   - Личный кабинет
   - Регистрация на мероприятия
   - Просмотр результатов
   - Статистика участия

### Типы лодок
- D-10 (Драконы)
- K-1, K-2, K-4 (Байдарки)
- C-1, C-2, C-4 (Каноэ)
- HD-1, OD-1, OD-2, OC-1 (Специальные классы)

### Спортивные звания
- ЗМС - Заслуженный Мастер Спорта
- МСМК - Мастер Спорта Международного Класса
- МССССР - Мастер Спорта СССР
- МСР - Мастер Спорта России
- МСсуч - Мастер Спорта страны участницы
- КМС - Кандидат в Мастера Спорта
- 1вр, 2вр, 3вр - Разряды
- БР - Без Разряда

## Безопасность

### Меры безопасности:
- Все пароли хешируются с использованием PHP password_hash()
- CSRF защита для всех форм
- Валидация и санитизация всех входных данных
- Защита от SQL-инъекций через подготовленные запросы
- Ограничение неудачных попыток входа (5 попыток = блокировка на 15 минут)
- Secure headers в Nginx (HSTS, CSP, XSS Protection)
- Сессии с httponly и secure флагами

### Рекомендации:
- Смените пароли по умолчанию после установки
- Настройте SSL сертификат для production
- Регулярно обновляйте Docker образы
- Мониторьте логи на подозрительную активность

## Резервное копирование

### Автоматическое резервное копирование:
- **Ежедневно в 03:00**: полная копия БД (хранится 30 дней)
- **1 января в 04:00**: годовая копия БД
- Скрипт: `scripts/backup_database.sh`

### Ручное резервное копирование:
```bash
# Создание резервной копии
docker-compose exec postgres pg_dump -U kgb_user kgb_pulse_db > backup_$(date +%Y%m%d_%H%M%S).sql

# Восстановление из резервной копии
docker-compose exec -i postgres psql -U kgb_user -d kgb_pulse_db < backup_file.sql
```

## Мониторинг и логи

### Просмотр логов:
```bash
# Логи всех контейнеров
docker-compose logs

# Логи конкретного сервиса
docker-compose logs nginx
docker-compose logs php
docker-compose logs postgres

# Следить за логами в реальном времени
docker-compose logs -f
```

### Мониторинг системы:
- Статус сервисов: `docker-compose ps`
- Использование ресурсов: `docker stats`
- Логи Nginx: `logs/nginx/`
- Логи PHP: `logs/php/`

## Обслуживание

### Обновление системы:
```bash
# Остановка сервисов
docker-compose down

# Обновление кода (если есть новые изменения)
git pull

# Пересборка и запуск
docker-compose up -d --build
```

### Очистка системы:
```bash
# Удаление старых образов
docker image prune

# Удаление неиспользуемых томов
docker volume prune

# Полная очистка Docker
docker system prune -a
```

### Масштабирование:
```bash
# Увеличение количества PHP воркеров
docker-compose up -d --scale php=3
```

## Автоматизация

### Настроенные cron задачи:
- **23:59 ежедневно**: Автозакрытие регистрации на прошедшие мероприятия
- **02:00 ежедневно**: Очистка временных файлов
- **03:00 ежедневно**: Резервное копирование БД
- **04:00 1 января**: Годовое резервное копирование
- **09:00 ежедневно**: Отправка уведомлений

## Устранение проблем

### Частые проблемы:

1. **Контейнеры не запускаются**
   ```bash
   # Проверить логи
   docker-compose logs
   # Пересобрать образы
   docker-compose build --no-cache
   ```

2. **Ошибка подключения к БД**
   ```bash
   # Проверить статус PostgreSQL
   docker-compose exec postgres pg_isready
   # Перезапустить БД
   docker-compose restart postgres
   ```

3. **Проблемы с правами файлов**
   ```bash
   # Исправить права для загруженных файлов
   sudo chown -R www-data:www-data www/lks/files/
   sudo chmod -R 755 www/lks/files/
   ```

4. **Не отправляются email**
   - Проверьте настройки SMTP в .env
   - Убедитесь, что пароль приложения создан в Yandex
   - Проверьте логи PHP

### Полная переустановка:
```bash
# Остановить и удалить все контейнеры
docker-compose down -v

# Удалить все данные (ОСТОРОЖНО!)
sudo rm -rf logs/* data/pgdata/*

# Пересоздать систему
docker-compose up -d
```

## Поддержка

### Контакты:
- **Email техподдержки**: canoe-kupavna@yandex.ru
- **Телефон**: +7 903 363-75-98

### Полезные ссылки:
- Документация Docker: https://docs.docker.com/
- Документация PostgreSQL: https://www.postgresql.org/docs/
- Документация PHP: https://www.php.net/docs.php

## Лицензия

© 2000-2025 Купавинская гребная база. Все права защищены.

Материально техническая база секции: 4 каноэ, 7 байдарок, 15 весел (5 профессиональных), 5 спасательных жилетов, 1 гидрокостюм. 