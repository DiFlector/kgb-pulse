---
alwaysApply: true
---

# Алгоритм распределения по возрастным группам (KGB-Pulse)

## 1. Структура class_distance

В поле meros.class_distance хранится JSON вида:

{
  "K-1": {
    "sex": ["М", "Ж"],
    "dist": ["200, 500", "500, 1000"],
    "age_group": [
      "группа 1: 18-29, группа 2: 30-39",   # для М
      "группа 1: 18-29, группа 2: 30-39"    # для Ж
    ]
  },
  ...
}

- sex[] — массив полов (обычно ["М", "Ж"] или ["M", "W", "MIX"] для D-10)
- dist[] — массив строк с дистанциями (по полу)
- age_group[] — массив строк, каждая строка содержит список возрастных групп для соответствующего пола (индекс совпадает с sex[])

## 2. Как выбирать возрастные группы

- Для каждой дисциплины (например, K-1, C-1, D-10) и пола ("М" или "Ж"):
  - Берём строку age_group[sexIndex] (sexIndex = индекс пола в sex[])
  - Разбиваем по ", " — получаем массив групп
  - Каждая группа: "группа N: min-max"

**Пример:**

age_group[0] = "группа 1: 18-29, группа 2: 30-39"
→ ["группа 1: 18-29", "группа 2: 30-39"]

## 3. Алгоритм распределения участника по группе

1. Определить пол участника (sex) и дисциплину (class)
2. Найти индекс пола в class_distance[class]["sex"]
3. Взять строку class_distance[class]["age_group"][sexIndex]
4. Разбить по ", " — получить массив групп
5. Для каждой группы:
   - Разбить по ": " → [название, диапазон]
   - Диапазон разбить по "-" → [min, max]
   - Если возраст участника (на 31.12.текущего года) входит в диапазон — это его группа

**Пример:**
- Участник: М, 25 лет, дисциплина K-1
- class_distance["K-1"]["sex"] = ["М", "Ж"]
- sexIndex = 0
- age_group[0] = "группа 1: 18-29, группа 2: 30-39"
- 25 входит в 18-29 → группа 1

## 4. Для групповых лодок (K-2, K-4, C-2, C-4):
- Используется средний возраст всех участников экипажа
- Алгоритм тот же, только вместо возраста — средний возраст

## 5. Для D-10 (драконы):
- Определить тип команды (М, Ж, MIX) по составу гребцов (см. правила)
- sexIndex = 0 (М), 1 (Ж), 2 (MIX)
- Далее — как обычно

## 6. Пример структуры age_group

"age_group": [
  "группа 1: 18-29, группа 2: 30-39",   # для М
  "группа 1: 18-29, группа 2: 30-39"    # для Ж
]

## 7. Важно
- Протоколы создаются только по реально существующим группам из age_group для данной дисциплины/пола/дистанции.
- Участники распределяются строго по этим группам.
- Если группа не найдена — участник не попадает ни в одну группу.
# Алгоритм распределения по возрастным группам (KGB-Pulse)

## 1. Структура class_distance

В поле meros.class_distance хранится JSON вида:

{
  "K-1": {
    "sex": ["М", "Ж"],
    "dist": ["200, 500", "500, 1000"],
    "age_group": [
      "группа 1: 18-29, группа 2: 30-39",   # для М
      "группа 1: 18-29, группа 2: 30-39"    # для Ж
    ]
  },
  ...
}

- sex[] — массив полов (обычно ["М", "Ж"] или ["M", "W", "MIX"] для D-10)
- dist[] — массив строк с дистанциями (по полу)
- age_group[] — массив строк, каждая строка содержит список возрастных групп для соответствующего пола (индекс совпадает с sex[])

## 2. Как выбирать возрастные группы

- Для каждой дисциплины (например, K-1, C-1, D-10) и пола ("М" или "Ж"):
  - Берём строку age_group[sexIndex] (sexIndex = индекс пола в sex[])
  - Разбиваем по ", " — получаем массив групп
  - Каждая группа: "группа N: min-max"

**Пример:**

age_group[0] = "группа 1: 18-29, группа 2: 30-39"
→ ["группа 1: 18-29", "группа 2: 30-39"]

## 3. Алгоритм распределения участника по группе

1. Определить пол участника (sex) и дисциплину (class)
2. Найти индекс пола в class_distance[class]["sex"]
3. Взять строку class_distance[class]["age_group"][sexIndex]
4. Разбить по ", " — получить массив групп
5. Для каждой группы:
   - Разбить по ": " → [название, диапазон]
   - Диапазон разбить по "-" → [min, max]
   - Если возраст участника (на 31.12.текущего года) входит в диапазон — это его группа

**Пример:**
- Участник: М, 25 лет, дисциплина K-1
- class_distance["K-1"]["sex"] = ["М", "Ж"]
- sexIndex = 0
- age_group[0] = "группа 1: 18-29, группа 2: 30-39"
- 25 входит в 18-29 → группа 1

## 4. Для групповых лодок (K-2, K-4, C-2, C-4):
- Используется средний возраст всех участников экипажа
- Алгоритм тот же, только вместо возраста — средний возраст

## 5. Для D-10 (драконы):
- Определить тип команды (М, Ж, MIX) по составу гребцов (см. правила)
- sexIndex = 0 (М), 1 (Ж), 2 (MIX)
- Далее — как обычно

## 6. Пример структуры age_group

"age_group": [
  "группа 1: 18-29, группа 2: 30-39",   # для М
  "группа 1: 18-29, группа 2: 30-39"    # для Ж
]

## 7. Важно
- Протоколы создаются только по реально существующим группам из age_group для данной дисциплины/пола/дистанции.
- Участники распределяются строго по этим группам.
- Используй полное название возрастной группы с названием и вохрастном: "группа 1: 18-29". 
- Если группа не найдена — участник не попадает ни в одну группу.
