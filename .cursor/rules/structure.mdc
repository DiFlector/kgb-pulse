---
alwaysApply: true
---
# Cursor Rules для проекта KGB-Pulse

## Общая архитектура

### Технологический стек
- **Backend**: PHP 8.x с PostgreSQL
- **Frontend**: HTML/CSS/JavaScript (jQuery)
- **База данных**: PostgreSQL с Redis для кэширования
- **Веб-сервер**: Nginx
- **Контейнеризация**: Docker + Docker Compose
- **Автоматизация**: Cron для задач

### Структура проекта
- `/lks/` - основное веб-приложение
- `/data/` - данные и конфигурация БД
- `/images/` - Docker образы
- `/scripts/` - скрипты обслуживания
- `/nginx/` - конфигурация веб-сервера

## Роли пользователей и права доступа

### Иерархия ролей (по userid):
1. **Admin** (1-50) - полный доступ к системе
2. **Organizer** (51-150) - управление мероприятиями
3. **Secretary** (151-250) - проведение соревнований
4. **Sportsman** (1000+) - участие в соревнованиях

### Права доступа (ENUM rights):
- 'Sportsman', 'Admin', 'Organizer', 'Secretary', 'SuperUser'

## База данных PostgreSQL

### Ключевые таблицы:
- **users** - пользователи системы (oid, userid, email, password, fio, sex, telephone, birthdata, country, city, accessrights, boats, sportzvanie)
- **meros** - мероприятия (oid, champn, merodata, meroname, class_distance, defcost, status, created_by)
- **listreg** - регистрации на мероприятия (oid, users_oid, meros_oid, teams_oid, discipline, oplata, cost, status, role)
- **teams** - команды (oid, teamid, teamname, teamcity, persons_amount, persons_all, class)
- **user_statistic** - статистика пользователей

### Важные ENUM типы:
- **boats**: 'D-10', 'K-1', 'K-2', 'K-4', 'C-1', 'C-2', 'C-4', 'HD-1', 'OD-1', 'OD-2', 'OC-1'
- **statuses**: 'В очереди', 'Зарегистрирован', 'Подтверждён', 'Ожидание команды', 'Дисквалифицирован', 'Неявка'
- **merostat**: 'В ожидании', 'Регистрация', 'Регистрация закрыта', 'Перенесено', 'Результаты', 'Завершено'
- **sportzvanias**: 'ЗМС', 'МСМК', 'МССССР', 'МСР', 'МСсуч', 'КМС', '1вр', '2вр', '3вр', 'БР'

### Критически важное правило для SQL:
**Поле status в таблице meros имеет тип ENUM merostat, PostgreSQL требует приведения к тексту (status::text) для работы TRIM() и сравнений.**

## Структура веб-приложения (/lks/)

### Директории по ролям:
- `/enter/admin/` - интерфейс администратора
- `/enter/organizer/` - интерфейс организатора
- `/enter/secretary/` - интерфейс секретаря (меню "Проведение мероприятий")
- `/enter/user/` - интерфейс пользователя

### Backend API (/lks/php/):
- `/php/common/` - общие классы (Auth.php, Database.php, SessionManager.php)
- `/php/admin/` - API администратора
- `/php/organizer/` - API организатора
- `/php/secretary/` - API секретаря
- `/php/user/` - API пользователя

### Файлы и ресурсы:
- `/files/` - загруженные файлы (excel, pdf, polojenia, results, protocol)
- `/files/template/` - шаблоны протоколов (Start_dragons.xlsx, Finish_dragons.xlsx, etc.)
- `/js/` - JavaScript файлы по ролям
- `/css/` - стили (style.css, style-clean.css, homepage-final.css)

## Логика статусов участников

### Статусы регистрации (listreg.status):
1. **"В очереди"** - подана заявка, ожидает подтверждения
2. **"Подтверждён"** - заявка подтверждена организатором
3. **"Зарегистрирован"** - полная регистрация с оплатой
4. **"Ожидание команды"** - ожидает формирования команды
5. **"Неявка"** - не явился на соревнования
6. **"Дисквалифицирован"** - дисквалифицирован судьями

### Правила обработки статусов:
- Кнопка "Неявка" доступна для: "В очереди", "Подтверждён", "Ожидание команды"
- Кнопка "Неявка" НЕ доступна для: "Зарегистрирован", "Дисквалифицирован", "Неявка"
- Дисквалификация только для зарегистрированных участников
- Автоматическая отметка неявки через 30 минут после начала мероприятия

## Автоматизация и скрипты

### Cron-задачи (/scripts/):
- `auto_close_registration.php` - автозакрытие регистрации
- `auto_mark_no_show.php` - автоотметка неявки
- `backup_database.sh` - резервное копирование БД
- `cleanup_logs.sh` - очистка логов
- `monitor_system.php` - мониторинг системы
- `security_check.php` - проверка безопасности

### Расписание:
- **Ежечасно**: автозакрытие регистрации, автоотметка неявки
- **Ежедневно**: резервное копирование (2:00), очистка данных (5:00)
- **Еженедельно**: очистка логов (воскресенье, 4:00)

## Безопасность

### Аутентификация:
- Хеширование паролей (password_hash)
- Токены сброса паролей
- Ограничение попыток входа
- Логирование попыток входа (login_attempts)

### Авторизация:
- Проверка ролей на каждой странице
- CSRF защита для POST запросов
- Валидация входных данных

### Защита данных:
- Prepared statements для SQL
- Санитизация пользовательского ввода
- Защита от XSS атак

## Redis и кэширование

### Структура данных Redis:
- **Сессии**: `session:*` (TTL: 24 часа)
- **Протоколы**: `protocol:*` (настраиваемый TTL)
- **Кэш**: `cache:*` (TTL: 1 час)

## Мониторинг и логирование

### Системные логи:
- Nginx: access.log, error.log
- PHP: error.log, slow.log
- PostgreSQL: логи запросов и ошибок

### Приложение:
- Безопасность: попытки входа, подозрительная активность
- Мониторинг: производительность, использование ресурсов

## Правила разработки

### При работе с SQL:
1. Всегда используй prepared statements
2. Для поля status в meros используй `status::text` при сравнениях
3. Проверяй индексы для оптимизации запросов

### При работе с файлами:
1. Загруженные файлы сохраняй в `/lks/files/` с соответствующей подпапкой
2. Шаблоны протоколов в `/lks/files/template/`
3. Временные файлы в `/lks/files/temp/`
4. JSON файлы в `/lks/files/json/`

### При работе с ролями:
1. Проверяй права доступа на каждой странице
2. Используй правильную иерархию ролей
3. Логируй действия пользователей

### При работе с мероприятиями:
1. Статусы мероприятий: 'В ожидании' → 'Регистрация' → 'Регистрация закрыта' → 'Результаты' → 'Завершено'
2. Автоматическое закрытие регистрации по времени
3. Автоматическая отметка неявки через 30 минут

### При работе с командами:
1. Проверяй количество участников (persons_amount vs persons_all)
2. Обрабатывай связанные команды (another_team)
3. Учитывай класс лодки для команды

## Известные проблемы и решения

### Проблема нулей в панели секретаря:
- **Причина**: поле status в таблице meros имеет тип ENUM merostat
- **Решение**: использовать `status::text` для работы TRIM() и сравнений
- **Статус**: решено во всех файлах секретаря, пользователя, организатора и автоматических скриптах

### Меню секретаря:
- Обновлено с "Протоколы" на "Проведение мероприятий"
- Все статистические счетчики отображают корректные данные

## Резервное копирование

### Ежедневные задачи:
- PostgreSQL (2:00)
- Redis (3:00)
- Очистка старых данных (5:00)

### Еженедельные задачи:
- Очистка логов (воскресенье, 4:00)
- Проверка целостности данных

### Ежегодные задачи:
- Создание годовых архивов (1 января)
- Обновление системы безопасности 