---
alwaysApply: true
---
## КРИТИЧЕСКИ ВАЖНО:

Базу данных не трогай!@01_init.sql @PROJECT_STRUCTURE.md ! Если нужно что-то изменить - Изменяй в коде, но не в бд! Запомни это!

## ВАЖНО:

Никогда ничего не устанавливай в систему, если что-то не работает. Например php в системе нет, но есть в докере - запускай все через докер. .sh скрипты можно запускать из системы.

## КРИТИЧЕСКИ ВАЖНО: Различие между id и oid

### oid (Object ID) - ВНУТРЕННИЙ КЛЮЧ
- **Тип**: SERIAL (автоинкремент)
- **Назначение**: Первичный ключ для связей между таблицами
- **Использование**: Внешние ключи, внутренние связи
- **Примеры связей**:
  - `users.oid` → `listreg.users_oid`
  - `meros.oid` → `listreg.meros_oid`
  - `teams.oid` → `listreg.teams_oid`

### id/userid/champn/teamid - ВНЕШНИЙ ИДЕНТИФИКАТОР
- **Тип**: INTEGER, TEXT
- **Назначение**: Пользовательский/бизнес-идентификатор
- **Использование**: Отображение пользователям, бизнес-логика
- **Примеры**:
  - `users.userid` (1000+) - номер спортсмена
  - `meros.champn` - номер чемпионата (INTEGER!)
  - `teams.teamid` - ID команды

## КРИТИЧЕСКИЕ ОШИБКИ, КОТОРЫЕ НЕЛЬЗЯ ДОПУСКАТЬ:

### 1. Поле champn = INTEGER, а не строка!
```sql
-- ❌ НЕПРАВИЛЬНО:
INSERT INTO meros (champn, ...) VALUES ('Тестовый чемпионат', ...)

-- ✅ ПРАВИЛЬНО:
INSERT INTO meros (champn, ...) VALUES (2024001, ...)
```

### 2. Поле boats = PostgreSQL array, а не JSON!
```sql
-- ❌ НЕПРАВИЛЬНО:
INSERT INTO users (boats, ...) VALUES ('["K-1"]', ...)

-- ✅ ПРАВИЛЬНО:
INSERT INTO users (boats, ...) VALUES ('{K-1}', ...)
```

### 3. Все внешние ключи ссылаются на oid, а не на id!
```sql
-- ❌ НЕПРАВИЛЬНО:
SELECT * FROM listreg WHERE users_oid = (SELECT userid FROM users WHERE email = 'test@example.com')

-- ✅ ПРАВИЛЬНО:
SELECT * FROM listreg WHERE users_oid = (SELECT oid FROM users WHERE email = 'test@example.com')
```